{
  "address": "0xbAEc9DF7dbEc17d8520182608E10dAC006DfB8f4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_layerZeroEndpoint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startMintId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endMintId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_usdcAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pozAdderss",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        }
      ],
      "name": "ReceiveFromChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        }
      ],
      "name": "SendToChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "countMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_useZro",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "estimateSendFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "freeListMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "glMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "greenListMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "greenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initPoz",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isFLClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "isFListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isGLClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "isGListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "isTrustedRemote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextMintId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "nonblockingLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintCount",
          "type": "uint256"
        }
      ],
      "name": "publicMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "sendFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "setCountMinted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_currentURI",
          "type": "string"
        }
      ],
      "name": "setCurrentURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isClamed",
          "type": "bool"
        }
      ],
      "name": "setFLClaimed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setFLMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isClamed",
          "type": "bool"
        }
      ],
      "name": "setGLClaimed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setGLMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_publicPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_greenPrice",
          "type": "uint256"
        }
      ],
      "name": "setMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isPaused",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "setPozToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_publicDate",
          "type": "uint256"
        }
      ],
      "name": "setPublicDate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startMintId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxMintId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_newURI",
          "type": "string"
        }
      ],
      "name": "setSpecialPack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "treasure",
          "type": "address"
        }
      ],
      "name": "setTreasuryWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "setUSDCToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawPoz",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawPozByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xed62f7f0fd360a36537e8368617718dccfd901904682b10685dd829344885196",
  "receipt": {
    "to": null,
    "from": "0x3A54802752fEFDc1aF2CD0b6DFA4F24694bDEE33",
    "contractAddress": "0xbAEc9DF7dbEc17d8520182608E10dAC006DfB8f4",
    "transactionIndex": 16,
    "gasUsed": "4789689",
    "logsBloom": "0x
    "blockHash": "0xb4de0ef3f1b79de360db538a42165743f2198b6ddb03c12d1edf7cd6fe7c5807",
    "transactionHash": "0xed62f7f0fd360a36537e8368617718dccfd901904682b10685dd829344885196",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 26581038,
        "transactionHash": "0xed62f7f0fd360a36537e8368617718dccfd901904682b10685dd829344885196",
        "address": "0xbAEc9DF7dbEc17d8520182608E10dAC006DfB8f4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003a54802752fefdc1af2cd0b6dfa4f24694bdee33"
        ],
        "data": "0x",
        "logIndex": 32,
        "blockHash": "0xb4de0ef3f1b79de360db538a42165743f2198b6ddb03c12d1edf7cd6fe7c5807"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 26581038,
        "transactionHash": "0xed62f7f0fd360a36537e8368617718dccfd901904682b10685dd829344885196",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000003a54802752fefdc1af2cd0b6dfa4f24694bdee33",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000334eaa26347cd8000000000000000000000000000000000000000000000000276dd0a58c3a867500000000000000000000000000000000000000000000197cb9b3ef48ef293c49000000000000000000000000000000000000000000000000273a81fb6606099d00000000000000000000000000000000000000000000197cb9e73df3155db921",
        "logIndex": 33,
        "blockHash": "0xb4de0ef3f1b79de360db538a42165743f2198b6ddb03c12d1edf7cd6fe7c5807"
      }
    ],
    "blockNumber": 26581038,
    "cumulativeGasUsed": "5139395",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://ipfs.io/ipfs/QmX4nwyt4iuLnaWKMjKAJhkVoLRYLqwW3B35BvZhwR8Z2v/",
    "0xf69186dfBa60DdB133E91E9A4B5673624293d8F8",
    1222,
    1421,
    "0x9561624667eEa5759889Ea413923f81D04752fE8",
    "0x7c4CCfEDCEeEDDB2B71dE2C51A1Dd9f897A3a435",
    "0x3A54802752fEFDc1aF2CD0b6DFA4F24694bDEE33"
  ],
  "numDeployments": 1,
  "solcInputHash": "97fdbc2f0086f2af8ec4b29d62e79a4e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_layerZeroEndpoint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startMintId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endMintId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_usdcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pozAdderss\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"ReceiveFromChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"SendToChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"countMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useZro\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"estimateSendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"freeListMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"glMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"greenListMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"greenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initPoz\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFLClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"isFListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isGLClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"isGListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextMintId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintCount\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"sendFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"setCountMinted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_currentURI\",\"type\":\"string\"}],\"name\":\"setCurrentURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isClamed\",\"type\":\"bool\"}],\"name\":\"setFLClaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setFLMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isClamed\",\"type\":\"bool\"}],\"name\":\"setGLClaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setGLMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_greenPrice\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isPaused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setPozToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicDate\",\"type\":\"uint256\"}],\"name\":\"setPublicDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startMintId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMintId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newURI\",\"type\":\"string\"}],\"name\":\"setSpecialPack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasure\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setUSDCToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawPoz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPozByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"estimateSendFee(uint16,bytes,uint256,bool,bytes)\":{\"details\":\"estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`) _dstChainId - L0 defined chain id to send tokens too _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain _tokenId - token Id to transfer _useZro - indicates to use zro to pay L0 fees _adapterParams - flexible bytes array to indicate messaging adapter services in L0\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"sendFrom(address,uint16,bytes,uint256,address,address,bytes)\":{\"details\":\"send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from` `_toAddress` can be any size depending on the `dstChainId`. `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token) `_adapterParams` is a flexible bytes array to indicate messaging adapter services\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PozzlenautsONFTPoz.sol\":\"PozzlenautsONFTPoz\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/PozzlenautsONFTPoz.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./tokens/extension/UniversalONFT721Poz.sol\\\";\\n\\ncontract PozzlenautsONFTPoz is UniversalONFT721Poz {\\n    constructor(\\n        string memory _baseURI,\\n        address _layerZeroEndpoint,\\n        uint256 _startMintId,\\n        uint256 _endMintId,\\n        address _usdcAddress,\\n        address _pozAdderss,\\n        address _treasuryAddress\\n    )\\n        UniversalONFT721Poz(\\n            \\\"PozzlenautsONFT\\\",\\n            \\\"Pozzlenaut\\\",\\n            _baseURI,\\n            _layerZeroEndpoint,\\n            _startMintId,\\n            _endMintId,\\n            _usdcAddress,\\n            _pozAdderss,\\n            _treasuryAddress\\n        )\\n    {}\\n}\\n\",\"keccak256\":\"0x7597417f4c744c76651fd47867b9591e95cb25b2b80ef4a293ec4ba8525d7cfe\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\r\\n\\r\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\r\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\r\\n    // @param _payload - a custom bytes payload to send to the destination contract\\r\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\r\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\r\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\r\\n    function send(\\r\\n        uint16 _dstChainId,\\r\\n        bytes calldata _destination,\\r\\n        bytes calldata _payload,\\r\\n        address payable _refundAddress,\\r\\n        address _zroPaymentAddress,\\r\\n        bytes calldata _adapterParams\\r\\n    ) external payable;\\r\\n\\r\\n    // @notice used by the messaging library to publish verified payload\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\r\\n    // @param _dstAddress - the address on destination chain\\r\\n    // @param _nonce - the unbound message ordering nonce\\r\\n    // @param _gasLimit - the gas limit for external contract execution\\r\\n    // @param _payload - verified payload to send to the destination contract\\r\\n    function receivePayload(\\r\\n        uint16 _srcChainId,\\r\\n        bytes calldata _srcAddress,\\r\\n        address _dstAddress,\\r\\n        uint64 _nonce,\\r\\n        uint256 _gasLimit,\\r\\n        bytes calldata _payload\\r\\n    ) external;\\r\\n\\r\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint64);\\r\\n\\r\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint64);\\r\\n\\r\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    // @param _payload - the custom message to send over LayerZero\\r\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\r\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\r\\n    function estimateFees(\\r\\n        uint16 _dstChainId,\\r\\n        address _userApplication,\\r\\n        bytes calldata _payload,\\r\\n        bool _payInZRO,\\r\\n        bytes calldata _adapterParam\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n\\r\\n    // @notice get this Endpoint's immutable source identifier\\r\\n    function getChainId() external view returns (uint16);\\r\\n\\r\\n    // @notice the interface to retry failed message on this Endpoint destination\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    // @param _payload - the payload to be retried\\r\\n    function retryPayload(\\r\\n        uint16 _srcChainId,\\r\\n        bytes calldata _srcAddress,\\r\\n        bytes calldata _payload\\r\\n    ) external;\\r\\n\\r\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getSendLibraryAddress(address _userApplication)\\r\\n        external\\r\\n        view\\r\\n        returns (address);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getReceiveLibraryAddress(address _userApplication)\\r\\n        external\\r\\n        view\\r\\n        returns (address);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for send() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isSendingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for receive() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isReceivingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    function getConfig(\\r\\n        uint16 _version,\\r\\n        uint16 _chainId,\\r\\n        address _userApplication,\\r\\n        uint256 _configType\\r\\n    ) external view returns (bytes memory);\\r\\n\\r\\n    // @notice get the send() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getSendVersion(address _userApplication)\\r\\n        external\\r\\n        view\\r\\n        returns (uint16);\\r\\n\\r\\n    // @notice get the lzReceive() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getReceiveVersion(address _userApplication)\\r\\n        external\\r\\n        view\\r\\n        returns (uint16);\\r\\n}\\r\\n\",\"keccak256\":\"0x30642bf5a4485667bf8ccd8454a7e360b62784cefe88f07fb6d94591e4ac17a4\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ILayerZeroReceiver {\\r\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\r\\n    // @param _srcChainId - the source endpoint identifier\\r\\n    // @param _srcAddress - the source sending contract address from the source chain\\r\\n    // @param _nonce - the ordered message nonce\\r\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\r\\n    function lzReceive(\\r\\n        uint16 _srcChainId,\\r\\n        bytes calldata _srcAddress,\\r\\n        uint64 _nonce,\\r\\n        bytes calldata _payload\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x66647bb1e973a693f4420f294688283cca5235ed950dc7a6f5f4394bf9ecf3c0\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ILayerZeroUserApplicationConfig {\\r\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\r\\n    function setConfig(\\r\\n        uint16 _version,\\r\\n        uint16 _chainId,\\r\\n        uint256 _configType,\\r\\n        bytes calldata _config\\r\\n    ) external;\\r\\n\\r\\n    // @notice set the send() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setSendVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setReceiveVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\r\\n    // @param _srcChainId - the chainId of the source chain\\r\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress)\\r\\n        external;\\r\\n}\\r\\n\",\"keccak256\":\"0x8bf1fe6dbc076c8232153322ca90018ef4ee8fe07c47957ba6eafc7045df5a5c\",\"license\":\"MIT\"},\"contracts/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../interfaces/ILayerZeroReceiver.sol\\\";\\r\\nimport \\\"../interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\r\\nimport \\\"../interfaces/ILayerZeroEndpoint.sol\\\";\\r\\n\\r\\n/*\\r\\n * a generic LzReceiver implementation\\r\\n */\\r\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\r\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\r\\n\\r\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\r\\n\\r\\n    event SetTrustedRemote(uint16 _srcChainId, bytes _srcAddress);\\r\\n\\r\\n    constructor(address _endpoint) {\\r\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\r\\n    }\\r\\n\\r\\n    function lzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public virtual override {\\r\\n        // lzReceive must be called by the endpoint for security\\r\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\r\\n\\r\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\r\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\r\\n        require(_srcAddress.length == trustedRemote.length && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\r\\n\\r\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n    }\\r\\n\\r\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\r\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\r\\n\\r\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\\r\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\r\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\r\\n        lzEndpoint.send{value: msg.value}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\r\\n    }\\r\\n\\r\\n    //---------------------------UserApplication config----------------------------------------\\r\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\r\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\r\\n    }\\r\\n\\r\\n    // generic config for LayerZero user Application\\r\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\r\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\r\\n    }\\r\\n\\r\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\r\\n        lzEndpoint.setSendVersion(_version);\\r\\n    }\\r\\n\\r\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\r\\n        lzEndpoint.setReceiveVersion(_version);\\r\\n    }\\r\\n\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\r\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\r\\n    }\\r\\n\\r\\n    // allow owner to set it multiple times.\\r\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external onlyOwner {\\r\\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\\r\\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\\r\\n    }\\r\\n\\r\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\r\\n\\r\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\r\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\r\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x09dd9e5f26db5fd50e6efd6cc97062448ed655c37bf4b8df79f4ee3482f2128c\",\"license\":\"MIT\"},\"contracts/lzApp/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./LzApp.sol\\\";\\r\\n\\r\\n/*\\r\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\r\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\r\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\r\\n */\\r\\nabstract contract NonblockingLzApp is LzApp {\\r\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\r\\n\\r\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))\\r\\n        public failedMessages;\\r\\n\\r\\n    event MessageFailed(\\r\\n        uint16 _srcChainId,\\r\\n        bytes _srcAddress,\\r\\n        uint64 _nonce,\\r\\n        bytes _payload\\r\\n    );\\r\\n\\r\\n    // overriding the virtual function in LzReceiver\\r\\n    function _blockingLzReceive(\\r\\n        uint16 _srcChainId,\\r\\n        bytes memory _srcAddress,\\r\\n        uint64 _nonce,\\r\\n        bytes memory _payload\\r\\n    ) internal virtual override {\\r\\n        // try-catch all errors/exceptions\\r\\n        try\\r\\n            this.nonblockingLzReceive(\\r\\n                _srcChainId,\\r\\n                _srcAddress,\\r\\n                _nonce,\\r\\n                _payload\\r\\n            )\\r\\n        {\\r\\n            // do nothing\\r\\n        } catch {\\r\\n            // error / exception\\r\\n            failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(\\r\\n                _payload\\r\\n            );\\r\\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function nonblockingLzReceive(\\r\\n        uint16 _srcChainId,\\r\\n        bytes memory _srcAddress,\\r\\n        uint64 _nonce,\\r\\n        bytes memory _payload\\r\\n    ) public virtual {\\r\\n        // only internal transaction\\r\\n        require(\\r\\n            _msgSender() == address(this),\\r\\n            \\\"NonblockingLzApp: caller must be LzApp\\\"\\r\\n        );\\r\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n    }\\r\\n\\r\\n    //@notice override this function\\r\\n    function _nonblockingLzReceive(\\r\\n        uint16 _srcChainId,\\r\\n        bytes memory _srcAddress,\\r\\n        uint64 _nonce,\\r\\n        bytes memory _payload\\r\\n    ) internal virtual;\\r\\n\\r\\n    function retryMessage(\\r\\n        uint16 _srcChainId,\\r\\n        bytes memory _srcAddress,\\r\\n        uint64 _nonce,\\r\\n        bytes memory _payload\\r\\n    ) public payable virtual {\\r\\n        // assert there is message to retry\\r\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\r\\n        require(\\r\\n            payloadHash != bytes32(0),\\r\\n            \\\"NonblockingLzApp: no stored message\\\"\\r\\n        );\\r\\n        require(\\r\\n            keccak256(_payload) == payloadHash,\\r\\n            \\\"NonblockingLzApp: invalid payload\\\"\\r\\n        );\\r\\n        // clear the stored message\\r\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\r\\n        // execute the message. revert if it fails again\\r\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3325db4d24c917594ff00db89328a980c842f9e29ed871cbe81e04a872955257\",\"license\":\"MIT\"},\"contracts/tokens/IONFT721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IONFT721Core.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ONFT standard\\r\\n */\\r\\ninterface IONFT721 is IONFT721Core, IERC721 {\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x34948453bf764b723f13a1e61aaa93208442af04dc51890182c1529732f68f24\",\"license\":\"MIT\"},\"contracts/tokens/IONFT721Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ONFT Core standard\\r\\n */\\r\\ninterface IONFT721Core is IERC165 {\\r\\n    /**\\r\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\r\\n     * _dstChainId - L0 defined chain id to send tokens too\\r\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\r\\n     * _tokenId - token Id to transfer\\r\\n     * _useZro - indicates to use zro to pay L0 fees\\r\\n     * _adapterParams - flexible bytes array to indicate messaging adapter services in L0\\r\\n     */\\r\\n    function estimateSendFee(\\r\\n        uint16 _dstChainId,\\r\\n        bytes calldata _toAddress,\\r\\n        uint256 _tokenId,\\r\\n        bool _useZro,\\r\\n        bytes calldata _adapterParams\\r\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\r\\n\\r\\n    /**\\r\\n     * @dev send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from`\\r\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\r\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\r\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\r\\n     */\\r\\n    function sendFrom(\\r\\n        address _from,\\r\\n        uint16 _dstChainId,\\r\\n        bytes calldata _toAddress,\\r\\n        uint256 _tokenId,\\r\\n        address payable _refundAddress,\\r\\n        address _zroPaymentAddress,\\r\\n        bytes calldata _adapterParams\\r\\n    ) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `_tokenId` are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\r\\n     * `_nonce` is the outbound nonce from\\r\\n     */\\r\\n    event SendToChain(\\r\\n        address indexed _sender,\\r\\n        uint16 indexed _dstChainId,\\r\\n        bytes indexed _toAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint64 _nonce\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `_tokenId` are sent from `_srcChainId` to the `_toAddress` at this chain. `_nonce` is the inbound nonce.\\r\\n     */\\r\\n    event ReceiveFromChain(\\r\\n        uint16 indexed _srcChainId,\\r\\n        bytes indexed _srcAddress,\\r\\n        address indexed _toAddress,\\r\\n        uint256 _tokenId,\\r\\n        uint64 _nonce\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0xb750eb8c9a28c3048d5f2fc0b2e804c7923eabd37871da2d20d3b0c4555dff6d\",\"license\":\"MIT\"},\"contracts/tokens/ONFT721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IONFT721.sol\\\";\\r\\nimport \\\"./ONFT721Core.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\n\\r\\n// NOTE: this ONFT contract has no public minting logic.\\r\\n// must implement your own minting logic in child classes\\r\\ncontract ONFT721 is ONFT721Core, ERC721URIStorage, IONFT721 {\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        address _lzEndpoint\\r\\n    ) ERC721(_name, _symbol) ONFT721Core(_lzEndpoint) {}\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ONFT721Core, ERC721, IERC165)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == type(IONFT721).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function _debitFrom(\\r\\n        address _from,\\r\\n        uint16,\\r\\n        bytes memory,\\r\\n        uint256 _tokenId\\r\\n    ) internal virtual override {\\r\\n        require(\\r\\n            _isApprovedOrOwner(_msgSender(), _tokenId),\\r\\n            \\\"ONFT721: send caller is not owner nor approved\\\"\\r\\n        );\\r\\n        require(\\r\\n            ERC721.ownerOf(_tokenId) == _from,\\r\\n            \\\"ONFT721: send from incorrect owner\\\"\\r\\n        );\\r\\n        _burn(_tokenId);\\r\\n    }\\r\\n\\r\\n    function _creditTo(\\r\\n        uint16,\\r\\n        address _toAddress,\\r\\n        uint256 _tokenId\\r\\n    ) internal virtual override {\\r\\n        _safeMint(_toAddress, _tokenId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1ee18e0994c859e8da8e4a16ffe9044a06161dd765060f27a78428022e76da26\",\"license\":\"MIT\"},\"contracts/tokens/ONFT721Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IONFT721Core.sol\\\";\\r\\nimport \\\"../lzApp/NonblockingLzApp.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\n\\r\\nabstract contract ONFT721Core is NonblockingLzApp, ERC165, IONFT721Core {\\r\\n    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return interfaceId == type(IONFT721Core).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    function estimateSendFee(uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, bool _useZro, bytes memory _adapterParams) public view virtual override returns (uint nativeFee, uint zroFee) {\\r\\n        // mock the payload for send()\\r\\n        bytes memory payload = abi.encode(_toAddress, _tokenId);\\r\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\r\\n    }\\r\\n\\r\\n    function sendFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) public payable virtual override {\\r\\n        _send(_from, _dstChainId, _toAddress, _tokenId, _refundAddress, _zroPaymentAddress, _adapterParams);\\r\\n    }\\r\\n\\r\\n    function _send(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\\r\\n        _debitFrom(_from, _dstChainId, _toAddress, _tokenId);\\r\\n\\r\\n        bytes memory payload = abi.encode(_toAddress, _tokenId);\\r\\n        _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\r\\n\\r\\n        uint64 nonce = lzEndpoint.getOutboundNonce(_dstChainId, address(this));\\r\\n        emit SendToChain(_from, _dstChainId, _toAddress, _tokenId, nonce);\\r\\n    }\\r\\n\\r\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\r\\n        // decode and load the toAddress\\r\\n        (bytes memory toAddressBytes, uint tokenId) = abi.decode(_payload, (bytes, uint));\\r\\n        address toAddress;\\r\\n        assembly {\\r\\n            toAddress := mload(add(toAddressBytes, 20))\\r\\n        }\\r\\n\\r\\n        _creditTo(_srcChainId, toAddress, tokenId);\\r\\n\\r\\n        emit ReceiveFromChain(_srcChainId, _srcAddress, toAddress, tokenId, _nonce);\\r\\n    }\\r\\n\\r\\n    function _debitFrom(address _from, uint16 _dstChainId, bytes memory _toAddress, uint _tokenId) internal virtual;\\r\\n\\r\\n    function _creditTo(uint16 _srcChainId, address _toAddress, uint _tokenId) internal virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0x09aca1a9ac412ef77096dc9fa6b2af0459444eac07f1125a5c5a2203e8fa9375\",\"license\":\"MIT\"},\"contracts/tokens/extension/UniversalONFT721Poz.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ONFT721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract IERC20Extented is IERC20 {\\n    function decimals() public view virtual returns (uint8);\\n}\\n\\n/// @title Interface of the UniversalONFT standard\\ncontract UniversalONFT721Poz is Ownable, ONFT721, ReentrancyGuard {\\n    uint256 public nextMintId;\\n    uint256 public maxMintId;\\n\\n    uint256 public publicPrice = 199;\\n    uint256 public greenPrice = 150;\\n    uint256 public initPoz = 60;\\n\\n    uint256 public publicDate = block.timestamp;\\n\\n    string public currentURI;\\n\\n    bool public isPaused = false;\\n\\n    mapping(address => uint256) public countMinted;\\n    mapping(address => bool) public isGLClaimed;\\n    mapping(address => bool) public isFLClaimed;\\n    mapping(uint256 => uint256) public tokenBalance;\\n    mapping(uint256 => uint256) public withdrawTimes;\\n    mapping(uint256 => string) public tokenURIs;\\n\\n    bytes32 public glMerkleRoot;\\n    bytes32 public flMerkleRoot;\\n\\n    IERC20Extented private usdcToken;\\n    IERC20Extented private pozToken;\\n\\n    address public treasuryWallet;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _currentURI,\\n        address _layerZeroEndpoint,\\n        uint256 _startMintId,\\n        uint256 _endMintId,\\n        address _usdcAddress,\\n        address _pozAdderss,\\n        address _treasuryAddress\\n    ) ONFT721(_name, _symbol, _layerZeroEndpoint) {\\n        nextMintId = _startMintId;\\n        maxMintId = _endMintId;\\n        treasuryWallet = _treasuryAddress;\\n\\n        setCurrentURI(_currentURI);\\n        setPozToken(_pozAdderss);\\n        setUSDCToken(_usdcAddress);\\n    }\\n\\n    modifier isGLMerkleProoved(bytes32[] calldata _merkleProof) {\\n        require(\\n            MerkleProof.verify(\\n                _merkleProof,\\n                glMerkleRoot,\\n                keccak256(abi.encodePacked(msg.sender))\\n            ),\\n            \\\"UniversalONFT721: Address is NOT Greenlisted yet!\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier isFLMerkleProoved(bytes32[] calldata _merkleProof) {\\n        require(\\n            MerkleProof.verify(\\n                _merkleProof,\\n                flMerkleRoot,\\n                keccak256(abi.encodePacked(msg.sender))\\n            ),\\n            \\\"UniversalONFT721: Address is NOT Freelisted yet!\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier glNotClaimed() {\\n        require(\\n            isGLClaimed[msg.sender] == false,\\n            \\\"UniversalONFT721: Greenlist already claimed!\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier flNotClaimed() {\\n        require(\\n            isFLClaimed[msg.sender] == false,\\n            \\\"UniversalONFT721: Freenlist already claimed!\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier isPublicOpen() {\\n        require(\\n            block.timestamp >= publicDate,\\n            \\\"UniversalONFT721: Public mint is not opened yet!\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier isSpecialOpen() {\\n        require(\\n            block.timestamp >= publicDate - 1 days,\\n            \\\"UniversalONFT721: Special mint is not opened yet!\\\"\\n        );\\n        _;\\n    }\\n\\n    function _mint(uint256 _mintCount, uint256 _mintPrice) private {\\n        require(\\n            nextMintId + _mintCount - 1 <= maxMintId,\\n            \\\"UniversalONFT721: max mint limit reached\\\"\\n        );\\n        require(isPaused == false, \\\"UniversalONFT721: Mint is Paused\\\");\\n\\n        if (_mintPrice > 0)\\n            usdcToken.transferFrom(\\n                msg.sender,\\n                treasuryWallet,\\n                _mintCount * _mintPrice * 10**usdcToken.decimals()\\n            );\\n\\n        for (uint256 i = 0; i < _mintCount; i++) {\\n            tokenBalance[nextMintId] = initPoz;\\n            uint256 newId = nextMintId;\\n            _safeMint(msg.sender, newId);\\n            _setTokenURI(newId, string(abi.encodePacked(currentURI, Strings.toString(newId))));\\n            nextMintId++;\\n        }\\n\\n        if(nextMintId == maxMintId + 1) {\\n            _setPaused(true);\\n        }\\n    }\\n\\n    function publicMint(uint256 _mintCount) external payable isPublicOpen returns(uint256) {\\n        require(\\n            countMinted[msg.sender] + _mintCount <= 3,\\n            \\\"UniversalONFT721: Mint count limited\\\"\\n        );\\n\\n        _mint(_mintCount, publicPrice);\\n        _setCountMinted(msg.sender, countMinted[msg.sender] + _mintCount);\\n\\n        return nextMintId - 1;\\n    }\\n\\n    function greenListMint(bytes32[] calldata _merkleProof)\\n        external\\n        payable\\n        isSpecialOpen\\n        isGLMerkleProoved(_merkleProof)\\n        glNotClaimed\\n        returns (uint256)\\n    {\\n        _mint(1, greenPrice);\\n        _setGLClaimed(msg.sender, true);\\n\\n        return nextMintId - 1;\\n    }\\n\\n    function freeListMint(bytes32[] calldata _merkleProof)\\n        external\\n        payable\\n        isSpecialOpen\\n        isFLMerkleProoved(_merkleProof)\\n        flNotClaimed\\n        returns (uint256)\\n    {\\n        _mint(1, 0);\\n        _setFLClaimed(msg.sender, true);\\n\\n        return nextMintId - 1;\\n    }\\n\\n    function isFListed(bytes32[] calldata _merkleProof) external view returns(bool) {\\n        return MerkleProof.verify(_merkleProof, flMerkleRoot, keccak256(abi.encodePacked(msg.sender)));\\n    }\\n    \\n    function isGListed(bytes32[] calldata _merkleProof) external view returns(bool) {\\n        return MerkleProof.verify(_merkleProof, glMerkleRoot, keccak256(abi.encodePacked(msg.sender)));\\n    }\\n    \\n    function setGLMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\\n        glMerkleRoot = _merkleRoot;\\n    }\\n\\n    function setFLMerkleRoot(bytes32 _merkleRoot) external onlyOwner {\\n        flMerkleRoot = _merkleRoot;\\n    }\\n\\n    function setCountMinted(address _sender, uint256 _count) public onlyOwner {\\n        _setCountMinted(_sender, _count);\\n    }\\n\\n    function _setCountMinted(address _sender, uint256 _count) internal {\\n        countMinted[_sender] = _count;\\n    }\\n\\n    function setGLClaimed(address _sender, bool _isClamed) external onlyOwner {\\n        _setGLClaimed(_sender, _isClamed);\\n    }\\n\\n    function _setGLClaimed(address _sender, bool _isClamed) internal {\\n        isGLClaimed[_sender] = _isClamed;\\n    }\\n\\n    function setFLClaimed(address _sender, bool _isClamed) public onlyOwner {\\n        _setFLClaimed(_sender, _isClamed);\\n    }\\n\\n    function _setFLClaimed(address _sender, bool _isClamed) internal {\\n        isFLClaimed[_sender] = _isClamed;\\n    }\\n\\n    function setPaused(bool _isPaused) external onlyOwner {\\n        _setPaused(_isPaused);\\n    }\\n\\n    function _setPaused(bool _isPaused) internal {\\n        isPaused = _isPaused;\\n    }\\n\\n    function setMintPrice(uint256 _publicPrice, uint256 _greenPrice)\\n        public\\n        onlyOwner\\n    {\\n        publicPrice = _publicPrice;\\n        greenPrice = _greenPrice;\\n    }\\n\\n    function setCurrentURI(string memory _currentURI) public onlyOwner {\\n        currentURI = _currentURI;\\n    }\\n\\n    function setSpecialPack(uint256 _startMintId, uint _maxMintId, string memory _newURI) public onlyOwner {\\n        nextMintId = _startMintId;\\n        maxMintId = _maxMintId;\\n        currentURI = _newURI;\\n        \\n        _setPaused(false);\\n    }\\n\\n    function setUSDCToken(address _newAddress) public onlyOwner {\\n        usdcToken = IERC20Extented(_newAddress);\\n    }\\n\\n    function setPozToken(address _newAddress) public onlyOwner {\\n        pozToken = IERC20Extented(_newAddress);\\n    }\\n\\n    function setPublicDate(uint256 _publicDate) public onlyOwner {\\n        publicDate = _publicDate;\\n    }\\n\\n    function withdrawPoz(uint256 _tokenId) public {\\n        require(_exists(_tokenId), \\\"UniversalONFT721: Token does not exist!\\\");\\n        require(\\n            ownerOf(_tokenId) == msg.sender,\\n            \\\"UniversalONFT721: Not your token\\\"\\n        );\\n        require(\\n            tokenBalance[_tokenId] > 0,\\n            \\\"UniversalONFT721: Poz balance is 0!\\\"\\n        );\\n        require(\\n            block.timestamp > publicDate + 90 days,\\n            \\\"UniversalONFT721: Poz withdraw is not opened yet!\\\"\\n        );\\n        for (uint256 i = 0; i < 9; i++) {\\n            if (\\n                publicDate + 90 days + i * 30 days <= block.timestamp &&\\n                block.timestamp <= publicDate + 90 days + (i + 1) * 30 days\\n            ) {\\n                require(\\n                    withdrawTimes[_tokenId] == i,\\n                    \\\"UniversalONFT721: Poz withdraw time is not right!\\\"\\n                );\\n                withdrawTimes[_tokenId] = i + 1;\\n                pozToken.transfer(\\n                    msg.sender,\\n                    (666 * 10**pozToken.decimals()) / 100\\n                );\\n                break;\\n            }\\n        }\\n    }\\n\\n    function withdrawPozByOwner() public onlyOwner {\\n        uint256 balance = pozToken.balanceOf(address(this));\\n        pozToken.transfer(treasuryWallet, balance);\\n    }\\n\\n    function setTreasuryWallet(address treasure) external onlyOwner {\\n        treasuryWallet = treasure;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xee37e349931a1f8f8bb210bfdd02287e8eb1de325b81451bf5ee656e996251bc\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a060405260c7600d556096600e55603c600f55426010556012805460ff191690553480156200002e57600080fd5b5060405162005420380380620054208339810160408190526200005191620003c2565b6040518060400160405280600f81526020016e141bde9e9b195b985d5d1cd3d39195608a1b8152506040518060400160405280600a815260200169141bde9e9b195b985d5d60b21b815250888888888888888888878282828080620000c5620000bf6200016960201b60201c565b6200016d565b60601b6001600160601b03191660805250508151620000ec906003906020850190620002ff565b50805162000102906004906020840190620002ff565b50506001600a55505050600b86905550600c849055601d80546001600160a01b0319166001600160a01b0383161790556200013d87620001bd565b620001488262000225565b620001538362000292565b505050505050505050505050505050506200054b565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146200020c5760405162461bcd60e51b815260206004820181905260248201526000805160206200540083398151915260448201526064015b60405180910390fd5b805162000221906011906020840190620002ff565b5050565b6000546001600160a01b03163314620002705760405162461bcd60e51b8152602060048201819052602482015260008051602062005400833981519152604482015260640162000203565b601c80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314620002dd5760405162461bcd60e51b8152602060048201819052602482015260008051602062005400833981519152604482015260640162000203565b601b80546001600160a01b0319166001600160a01b0392909216919091179055565b8280546200030d90620004f8565b90600052602060002090601f0160209004810192826200033157600085556200037c565b82601f106200034c57805160ff19168380011785556200037c565b828001600101855582156200037c579182015b828111156200037c5782518255916020019190600101906200035f565b506200038a9291506200038e565b5090565b5b808211156200038a57600081556001016200038f565b80516001600160a01b0381168114620003bd57600080fd5b919050565b600080600080600080600060e0888a031215620003dd578283fd5b87516001600160401b0380821115620003f4578485fd5b818a0191508a601f83011262000408578485fd5b8151818111156200041d576200041d62000535565b604051601f8201601f19908116603f0116810190838211818310171562000448576200044862000535565b81604052828152602093508d8484870101111562000464578788fd5b8791505b8282101562000487578482018401518183018501529083019062000468565b828211156200049857878484830101525b9a50620004aa9150508a8201620003a5565b975050506040880151945060608801519350620004ca60808901620003a5565b9250620004da60a08901620003a5565b9150620004ea60c08901620003a5565b905092959891949750929550565b600181811c908216806200050d57607f821691505b602082108114156200052f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160601c614e57620005a960003960008181610a4101528181610cb801528181610f890152818161124f015281816113b2015281816116b601528181611d8a015281816129350152818161315301526139490152614e576000f3fe6080604052600436106103ee5760003560e01c80637533d78811610208578063bd89cc7111610118578063e1d4c870116100ab578063eb8d72b71161007a578063eb8d72b714610c2d578063f2fde38b14610c4d578063f36bc30d14610c6d578063f5ecbdbc14610c80578063fb0bc9d714610ca057600080fd5b8063e1d4c87014610b8e578063e67cf48214610ba4578063e985e9c514610bc4578063ea9d6d2914610c0d57600080fd5b8063d1deba1f116100e7578063d1deba1f14610b33578063d5aaffe314610b46578063d721161214610b66578063dd68832314610b7b57600080fd5b8063bd89cc7114610aa3578063c32e00fe14610ad3578063c87b56dd14610af3578063cbed8b9c14610b1357600080fd5b8063a80d71bb1161019b578063ac4976a11161016a578063ac4976a1146109f5578063b187bd2614610a15578063b353aaa714610a2f578063b473171614610a63578063b88d4fde14610a8357600080fd5b8063a80d71bb14610979578063a8602fea1461098f578063a945bf80146109af578063a966fa33146109c557600080fd5b80638da5cb5b116101d75780638da5cb5b146109065780639511e65c1461092457806395d89b4114610944578063a22cb4651461095957600080fd5b80637533d7881461088357806378624f09146108a35780637e10ab0d146108b957806387b8ff27146108e657600080fd5b806342842e0e1161030357806357a736091161029657806366ad5c8a1161026557806366ad5c8a146107f85780636aa99da3146108185780636c8b703f1461082e57806370a082311461084e578063715018a61461086e57600080fd5b806357a73609146107465780635b8c41e6146107735780636352211e146107c257806363b468ce146107e257600080fd5b806349afc6e5116102d257806349afc6e5146106da57806351463d5b14610707578063519056361461071d57806351d982b41461073057600080fd5b806342842e0e1461065a57806342d65a8d1461067a578063450a32921461069a5780634626402b146106ba57600080fd5b80630f78a4d511610386578063197e6cf011610355578063197e6cf0146105a457806323b872dd146105c45780632a205e3d146105e45780632db11544146106195780633d8b38f61461063a57600080fd5b80630f78a4d51461052457806310ddb13714610544578063115763311461056457806316c38b3c1461058457600080fd5b806307e0db17116103c257806307e0db171461048c578063081812fc146104ac578063095ea7b3146104e45780630f5a9d011461050457600080fd5b80621d3567146103f357806301ffc9a7146104155780630442bfa81461044a57806306fdde031461046a575b600080fd5b3480156103ff57600080fd5b5061041361040e3660046144cc565b610cb5565b005b34801561042157600080fd5b50610435610430366004614294565b610e5c565b60405190151581526020015b60405180910390f35b34801561045657600080fd5b50610413610465366004614615565b610e7f565b34801561047657600080fd5b5061047f610eb4565b60405161044191906148a6565b34801561049857600080fd5b506104136104a7366004614374565b610f46565b3480156104b857600080fd5b506104cc6104c736600461427c565b610fea565b6040516001600160a01b039091168152602001610441565b3480156104f057600080fd5b506104136104ff3660046141aa565b611072565b34801561051057600080fd5b5061041361051f366004613fca565b611188565b34801561053057600080fd5b5061041361053f3660046140c7565b6111d4565b34801561055057600080fd5b5061041361055f366004614374565b61120c565b34801561057057600080fd5b5061041361057f366004613fca565b611286565b34801561059057600080fd5b5061041361059f366004614244565b6112d2565b3480156105b057600080fd5b506104136105bf36600461427c565b611312565b3480156105d057600080fd5b506104136105df36600461401e565b611341565b3480156105f057600080fd5b506106046105ff3660046143de565b611373565b60408051928352602083019190915201610441565b61062c61062736600461427c565b61144d565b604051908152602001610441565b34801561064657600080fd5b5061043561065536600461438e565b61158e565b34801561066657600080fd5b5061041361067536600461401e565b61165a565b34801561068657600080fd5b5061041361069536600461438e565b611675565b3480156106a657600080fd5b506104136106b5366004614659565b611726565b3480156106c657600080fd5b50601d546104cc906001600160a01b031681565b3480156106e657600080fd5b5061062c6106f536600461427c565b60166020526000908152604090205481565b34801561071357600080fd5b5061062c60105481565b61041361072b3660046140f4565b61177d565b34801561073c57600080fd5b5061062c600e5481565b34801561075257600080fd5b5061062c61076136600461427c565b60176020526000908152604090205481565b34801561077f57600080fd5b5061062c61078e36600461446d565b6002602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b3480156107ce57600080fd5b506104cc6107dd36600461427c565b61178c565b3480156107ee57600080fd5b5061062c60195481565b34801561080457600080fd5b506104136108133660046144cc565b611803565b34801561082457600080fd5b5061062c600b5481565b34801561083a57600080fd5b5061047f61084936600461427c565b611873565b34801561085a57600080fd5b5061062c610869366004613fca565b61190d565b34801561087a57600080fd5b50610413611994565b34801561088f57600080fd5b5061047f61089e366004614374565b6119ca565b3480156108af57600080fd5b5061062c601a5481565b3480156108c557600080fd5b5061062c6108d4366004613fca565b60136020526000908152604090205481565b3480156108f257600080fd5b506104136109013660046140c7565b6119e3565b34801561091257600080fd5b506000546001600160a01b03166104cc565b34801561093057600080fd5b5061041361093f3660046141aa565b611a17565b34801561095057600080fd5b5061047f611a5e565b34801561096557600080fd5b506104136109743660046140c7565b611a6d565b34801561098557600080fd5b5061062c600f5481565b34801561099b57600080fd5b506104136109aa366004613fca565b611a78565b3480156109bb57600080fd5b5061062c600d5481565b3480156109d157600080fd5b506104356109e0366004613fca565b60156020526000908152604090205460ff1681565b348015610a0157600080fd5b50610435610a103660046141d5565b611ac4565b348015610a2157600080fd5b506012546104359060ff1681565b348015610a3b57600080fd5b506104cc7f000000000000000000000000000000000000000000000000000000000000000081565b348015610a6f57600080fd5b50610413610a7e366004614342565b611b34565b348015610a8f57600080fd5b50610413610a9e36600461405e565b611b71565b348015610aaf57600080fd5b50610435610abe366004613fca565b60146020526000908152604090205460ff1681565b348015610adf57600080fd5b50610413610aee36600461427c565b611ba3565b348015610aff57600080fd5b5061047f610b0e36600461427c565b611bd2565b348015610b1f57600080fd5b50610413610b2e366004614591565b611d49565b610413610b413660046144cc565b611e00565b348015610b5257600080fd5b50610435610b613660046141d5565b611f52565b348015610b7257600080fd5b50610413611fa0565b61062c610b893660046141d5565b6120d0565b348015610b9a57600080fd5b5061062c600c5481565b348015610bb057600080fd5b50610413610bbf36600461427c565b612259565b348015610bd057600080fd5b50610435610bdf366004613fe6565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205460ff1690565b348015610c1957600080fd5b50610413610c2836600461427c565b612641565b348015610c3957600080fd5b50610413610c4836600461438e565b612670565b348015610c5957600080fd5b50610413610c68366004613fca565b6126f9565b61062c610c7b3660046141d5565b612791565b348015610c8c57600080fd5b5061047f610c9b366004614545565b612904565b348015610cac57600080fd5b5061047f6129bb565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610d325760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff841660009081526001602052604081208054610d5090614d27565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7c90614d27565b8015610dc95780601f10610d9e57610100808354040283529160200191610dc9565b820191906000526020600020905b815481529060010190602001808311610dac57829003601f168201915b5050505050905080518451148015610dee575080805190602001208480519060200120145b610e495760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6044820152651b9d1c9858dd60d21b6064820152608401610d29565b610e55858585856129c8565b5050505050565b60006001600160e01b031982161580610e795750610e7982612ab9565b92915050565b6000546001600160a01b03163314610ea95760405162461bcd60e51b8152600401610d299061497e565b600d91909155600e55565b606060038054610ec390614d27565b80601f0160208091040260200160405190810160405280929190818152602001828054610eef90614d27565b8015610f3c5780601f10610f1157610100808354040283529160200191610f3c565b820191906000526020600020905b815481529060010190602001808311610f1f57829003601f168201915b5050505050905090565b6000546001600160a01b03163314610f705760405162461bcd60e51b8152600401610d299061497e565b6040516307e0db1760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b158015610fd657600080fd5b505af1158015610e55573d6000803e3d6000fd5b6000610ff582612af9565b6110565760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610d29565b506000908152600760205260409020546001600160a01b031690565b600061107d8261178c565b9050806001600160a01b0316836001600160a01b031614156110eb5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610d29565b336001600160a01b038216148061110757506111078133610bdf565b6111795760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610d29565b6111838383612b16565b505050565b6000546001600160a01b031633146111b25760405162461bcd60e51b8152600401610d299061497e565b601b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146111fe5760405162461bcd60e51b8152600401610d299061497e565b6112088282612b84565b5050565b6000546001600160a01b031633146112365760405162461bcd60e51b8152600401610d299061497e565b6040516310ddb13760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb13790602401610fbc565b6000546001600160a01b031633146112b05760405162461bcd60e51b8152600401610d299061497e565b601c80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146112fc5760405162461bcd60e51b8152600401610d299061497e565b6012805482151560ff1990911617905550565b50565b6000546001600160a01b0316331461133c5760405162461bcd60e51b8152600401610d299061497e565b601955565b61134c335b82612baf565b6113685760405162461bcd60e51b8152600401610d29906149b3565b611183838383612c98565b6000806000868660405160200161138b9291906148b9565b60408051601f198184030181529082905263040a7bb160e41b825291506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340a7bb10906113ef908b90309086908b908b90600401614a04565b604080518083038186803b15801561140657600080fd5b505afa15801561141a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143e9190614636565b92509250509550959350505050565b60006010544210156114ba5760405162461bcd60e51b815260206004820152603060248201527f556e6976657273616c4f4e46543732313a205075626c6963206d696e7420697360448201526f206e6f74206f70656e6564207965742160801b6064820152608401610d29565b336000908152601360205260409020546003906114d8908490614bab565b11156115325760405162461bcd60e51b8152602060048201526024808201527f556e6976657273616c4f4e46543732313a204d696e7420636f756e74206c696d6044820152631a5d195960e21b6064820152608401610d29565b61153e82600d54612e34565b3360008181526013602052604090205461157a919061155e908590614bab565b6001600160a01b03909116600090815260136020526040902055565b6001600b54610e799190614ce4565b919050565b61ffff8316600090815260016020526040812080548291906115af90614d27565b80601f01602080910402602001604051908101604052809291908181526020018280546115db90614d27565b80156116285780601f106115fd57610100808354040283529160200191611628565b820191906000526020600020905b81548152906001019060200180831161160b57829003601f168201915b50505050509050838360405161163f929190614771565b60405180910390208180519060200120149150509392505050565b61118383838360405180602001604052806000815250611b71565b6000546001600160a01b0316331461169f5760405162461bcd60e51b8152600401610d299061497e565b6040516342d65a8d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d906116ef90869086908690600401614a58565b600060405180830381600087803b15801561170957600080fd5b505af115801561171d573d6000803e3d6000fd5b50505050505050565b6000546001600160a01b031633146117505760405162461bcd60e51b8152600401610d299061497e565b600b839055600c829055805161176d906011906020840190613d9b565b506012805460ff19169055505050565b61171d878787878787876130f2565b6000818152600560205260408120546001600160a01b031680610e795760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610d29565b3330146118615760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b6064820152608401610d29565b61186d84848484613249565b50505050565b6018602052600090815260409020805461188c90614d27565b80601f01602080910402602001604051908101604052809291908181526020018280546118b890614d27565b80156119055780601f106118da57610100808354040283529160200191611905565b820191906000526020600020905b8154815290600101906020018083116118e857829003601f168201915b505050505081565b60006001600160a01b0382166119785760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610d29565b506001600160a01b031660009081526006602052604090205490565b6000546001600160a01b031633146119be5760405162461bcd60e51b8152600401610d299061497e565b6119c860006132e4565b565b6001602052600090815260409020805461188c90614d27565b6000546001600160a01b03163314611a0d5760405162461bcd60e51b8152600401610d299061497e565b6112088282613334565b6000546001600160a01b03163314611a415760405162461bcd60e51b8152600401610d299061497e565b6001600160a01b0391909116600090815260136020526040902055565b606060048054610ec390614d27565b61120833838361335f565b6000546001600160a01b03163314611aa25760405162461bcd60e51b8152600401610d299061497e565b601d80546001600160a01b0319166001600160a01b0392909216919091179055565b6000611b2d83838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050601a54604051909250611b1291503390602001614754565b6040516020818303038152906040528051906020012061342e565b9392505050565b6000546001600160a01b03163314611b5e5760405162461bcd60e51b8152600401610d299061497e565b8051611208906011906020840190613d9b565b611b7b3383612baf565b611b975760405162461bcd60e51b8152600401610d29906149b3565b61186d84848484613444565b6000546001600160a01b03163314611bcd5760405162461bcd60e51b8152600401610d299061497e565b601a55565b6060611bdd82612af9565b611c435760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610d29565b60008281526009602052604081208054611c5c90614d27565b80601f0160208091040260200160405190810160405280929190818152602001828054611c8890614d27565b8015611cd55780601f10611caa57610100808354040283529160200191611cd5565b820191906000526020600020905b815481529060010190602001808311611cb857829003601f168201915b505050505090506000611cf360408051602081019091526000815290565b9050805160001415611d06575092915050565b815115611d38578082604051602001611d2092919061479d565b60405160208183030381529060405292505050919050565b611d4184613477565b949350505050565b6000546001600160a01b03163314611d735760405162461bcd60e51b8152600401610d299061497e565b6040516332fb62e760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c90611dc79088908890889088908890600401614b26565b600060405180830381600087803b158015611de157600080fd5b505af1158015611df5573d6000803e3d6000fd5b505050505050505050565b61ffff84166000908152600260205260408082209051611e21908690614781565b90815260408051602092819003830190206001600160401b03861660009081529252902054905080611ea15760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b6064820152608401610d29565b815160208301208114611f005760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b6064820152608401610d29565b61ffff85166000908152600260205260408082209051611f21908790614781565b90815260408051602092819003830190206001600160401b03871660009081529252902055610e5585858585613249565b6000611b2d83838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050601954604051909250611b1291503390602001614754565b6000546001600160a01b03163314611fca5760405162461bcd60e51b8152600401610d299061497e565b601c546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561200e57600080fd5b505afa158015612022573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204691906145fd565b601c54601d5460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101849052929350169063a9059cbb90604401602060405180830381600087803b15801561209857600080fd5b505af11580156120ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112089190614260565b6000620151806010546120e39190614ce4565b4210156121025760405162461bcd60e51b8152600401610d299061492d565b828261215082828080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050601a54604051909250611b1291503390602001614754565b6121b55760405162461bcd60e51b815260206004820152603060248201527f556e6976657273616c4f4e46543732313a2041646472657373206973204e4f5460448201526f20467265656c6973746564207965742160801b6064820152608401610d29565b3360009081526015602052604090205460ff161561222a5760405162461bcd60e51b815260206004820152602c60248201527f556e6976657273616c4f4e46543732313a20467265656e6c69737420616c726560448201526b61647920636c61696d65642160a01b6064820152608401610d29565b61223660016000612e34565b612241336001613334565b6001600b546122509190614ce4565b95945050505050565b61226281612af9565b6122be5760405162461bcd60e51b815260206004820152602760248201527f556e6976657273616c4f4e46543732313a20546f6b656e20646f6573206e6f746044820152662065786973742160c81b6064820152608401610d29565b336122c88261178c565b6001600160a01b03161461231e5760405162461bcd60e51b815260206004820181905260248201527f556e6976657273616c4f4e46543732313a204e6f7420796f757220746f6b656e6044820152606401610d29565b6000818152601660205260409020546123855760405162461bcd60e51b815260206004820152602360248201527f556e6976657273616c4f4e46543732313a20506f7a2062616c616e636520697360448201526220302160e81b6064820152608401610d29565b601054612395906276a700614bab565b42116123fd5760405162461bcd60e51b815260206004820152603160248201527f556e6976657273616c4f4e46543732313a20506f7a207769746864726177206960448201527073206e6f74206f70656e6564207965742160781b6064820152608401610d29565b60005b600981101561120857426124178262278d00614cc5565b601054612427906276a700614bab565b6124319190614bab565b111580156124705750612445816001614bab565b6124529062278d00614cc5565b601054612462906276a700614bab565b61246c9190614bab565b4211155b1561262f5760008281526017602052604090205481146124ec5760405162461bcd60e51b815260206004820152603160248201527f556e6976657273616c4f4e46543732313a20506f7a2077697468647261772074604482015270696d65206973206e6f742072696768742160781b6064820152608401610d29565b6124f7816001614bab565b60008381526017602090815260409182902092909255601c54815163313ce56760e01b815291516001600160a01b039091169263a9059cbb923392606492869263313ce5679260048083019392829003018186803b15801561255857600080fd5b505afa15801561256c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259091906146c2565b61259b90600a614c1a565b6125a79061029a614cc5565b6125b19190614bc3565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156125f757600080fd5b505af115801561260b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111839190614260565b8061263981614d62565b915050612400565b6000546001600160a01b0316331461266b5760405162461bcd60e51b8152600401610d299061497e565b601055565b6000546001600160a01b0316331461269a5760405162461bcd60e51b8152600401610d299061497e565b61ffff831660009081526001602052604090206126b8908383613e1f565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab8383836040516126ec93929190614a58565b60405180910390a1505050565b6000546001600160a01b031633146127235760405162461bcd60e51b8152600401610d299061497e565b6001600160a01b0381166127885760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d29565b61130f816132e4565b6000620151806010546127a49190614ce4565b4210156127c35760405162461bcd60e51b8152600401610d299061492d565b828261281182828080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050601954604051909250611b1291503390602001614754565b6128775760405162461bcd60e51b815260206004820152603160248201527f556e6976657273616c4f4e46543732313a2041646472657373206973204e4f5460448201527020477265656e6c6973746564207965742160781b6064820152608401610d29565b3360009081526014602052604090205460ff16156128ec5760405162461bcd60e51b815260206004820152602c60248201527f556e6976657273616c4f4e46543732313a20477265656e6c69737420616c726560448201526b61647920636c61696d65642160a01b6064820152608401610d29565b6128f96001600e54612e34565b612241336001612b84565b604051633d7b2f6f60e21b815261ffff808616600483015284166024820152306044820152606481018290526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc9060840160006040518083038186803b15801561297f57600080fd5b505afa158015612993573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261225091908101906142cc565b6011805461188c90614d27565b604051633356ae4560e11b815230906366ad5c8a906129f1908790879087908790600401614add565b600060405180830381600087803b158015612a0b57600080fd5b505af1925050508015612a1c575060015b61186d578080519060200120600260008661ffff1661ffff16815260200190815260200160002084604051612a519190614781565b9081526040805191829003602090810183206001600160401b0387166000908152915220919091557fe6f254030bcb01ffd20558175c13fcaed6d1520be7becee4c961b65f79243b0d90612aac908690869086908690614add565b60405180910390a161186d565b60006001600160e01b031982166380ac58cd60e01b1480612aea57506001600160e01b03198216635b5e139f60e01b145b80610e795750610e798261354e565b6000908152600560205260409020546001600160a01b0316151590565b600081815260076020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612b4b8261178c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001600160a01b03919091166000908152601460205260409020805460ff1916911515919091179055565b6000612bba82612af9565b612c1b5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610d29565b6000612c268361178c565b9050806001600160a01b0316846001600160a01b03161480612c6d57506001600160a01b0380821660009081526008602090815260408083209388168352929052205460ff165b80611d415750836001600160a01b0316612c8684610fea565b6001600160a01b031614949350505050565b826001600160a01b0316612cab8261178c565b6001600160a01b031614612d0f5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610d29565b6001600160a01b038216612d715760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610d29565b612d7c600082612b16565b6001600160a01b0383166000908152600660205260408120805460019290612da5908490614ce4565b90915550506001600160a01b0382166000908152600660205260408120805460019290612dd3908490614bab565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600c54600183600b54612e479190614bab565b612e519190614ce4565b1115612eb05760405162461bcd60e51b815260206004820152602860248201527f556e6976657273616c4f4e46543732313a206d6178206d696e74206c696d6974604482015267081c995858da195960c21b6064820152608401610d29565b60125460ff1615612f035760405162461bcd60e51b815260206004820181905260248201527f556e6976657273616c4f4e46543732313a204d696e74206973205061757365646044820152606401610d29565b801561303d57601b54601d546040805163313ce56760e01b815290516001600160a01b03938416936323b872dd933393911691859163313ce567916004808301926020929190829003018186803b158015612f5d57600080fd5b505afa158015612f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9591906146c2565b612fa090600a614c1a565b612faa8688614cc5565b612fb49190614cc5565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b15801561300357600080fd5b505af1158015613017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061303b9190614260565b505b60005b828110156130c957600f54600b80546000908152601660205260409020919091555461306c3382613583565b6130a081601161307b8461359d565b60405160200161308c9291906147cc565b6040516020818303038152906040526136b6565b600b80549060006130b083614d62565b91905055505080806130c190614d62565b915050613040565b50600c546130d8906001614bab565b600b541415611208576012805460ff191660011790555050565b6130fe87878787613741565b600085856040516020016131139291906148b9565b6040516020818303038152906040529050613131878286868661382a565b604051630f428ae960e31b815261ffff881660048201523060248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637a1457489060440160206040518083038186803b15801561319d57600080fd5b505afa1580156131b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d591906146a6565b9050866040516131e59190614781565b604080519182900382208883526001600160401b03841660208401529161ffff8b16916001600160a01b038d16917f024797cc77ce15dc717112d54fb1df125fdfd8c81344fb046c5e074427ce1543910160405180910390a4505050505050505050565b6000808280602001905181019061326091906142fe565b601482015191935091506132758782846139c4565b806001600160a01b03168660405161328d9190614781565b604080519182900382208583526001600160401b03891660208401529161ffff8b16917f64e10c37f404d128982dce114f5d233c14c5c7f6d8db93099e3d99dacb9e27ba910160405180910390a450505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03919091166000908152601560205260409020805460ff1916911515919091179055565b816001600160a01b0316836001600160a01b031614156133c15760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610d29565b6001600160a01b03838116600081815260086020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60008261343b85846139ce565b14949350505050565b61344f848484612c98565b61345b84848484613a50565b61186d5760405162461bcd60e51b8152600401610d29906148db565b606061348282612af9565b6134e65760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610d29565b60006134fd60408051602081019091526000815290565b9050600081511161351d5760405180602001604052806000815250611b2d565b806135278461359d565b60405160200161353892919061479d565b6040516020818303038152906040529392505050565b60006001600160e01b03198216637bb0080b60e01b1480610e7957506301ffc9a760e01b6001600160e01b0319831614610e79565b611208828260405180602001604052806000815250613b5a565b6060816135c15750506040805180820190915260018152600360fc1b602082015290565b8160005b81156135eb57806135d581614d62565b91506135e49050600a83614bc3565b91506135c5565b6000816001600160401b0381111561361357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561363d576020820181803683370190505b5090505b8415611d4157613652600183614ce4565b915061365f600a86614d7d565b61366a906030614bab565b60f81b81838151811061368d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506136af600a86614bc3565b9450613641565b6136bf82612af9565b6137225760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610d29565b6000828152600960209081526040909120825161118392840190613d9b565b61374a33611346565b6137ad5760405162461bcd60e51b815260206004820152602e60248201527f4f4e46543732313a2073656e642063616c6c6572206973206e6f74206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b6064820152608401610d29565b836001600160a01b03166137c08261178c565b6001600160a01b0316146138215760405162461bcd60e51b815260206004820152602260248201527f4f4e46543732313a2073656e642066726f6d20696e636f7272656374206f776e60448201526132b960f11b6064820152608401610d29565b61186d81613b8d565b61ffff85166000908152600160205260408120805461384890614d27565b80601f016020809104026020016040519081016040528092919081815260200182805461387490614d27565b80156138c15780601f10613896576101008083540402835291602001916138c1565b820191906000526020600020905b8154815290600101906020018083116138a457829003601f168201915b505050505090508051600014156139335760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201526f61207472757374656420736f7572636560801b6064820152608401610d29565b60405162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c580310090349061398a908a9086908b908b908b908b90600401614a76565b6000604051808303818588803b1580156139a357600080fd5b505af11580156139b7573d6000803e3d6000fd5b5050505050505050505050565b6111838282613583565b600081815b8451811015613a485760008582815181106139fe57634e487b7160e01b600052603260045260246000fd5b60200260200101519050808311613a245760008381526020829052604090209250613a35565b600081815260208490526040902092505b5080613a4081614d62565b9150506139d3565b509392505050565b60006001600160a01b0384163b15613b5257604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613a94903390899088908890600401614869565b602060405180830381600087803b158015613aae57600080fd5b505af1925050508015613ade575060408051601f3d908101601f19168201909252613adb918101906142b0565b60015b613b38573d808015613b0c576040519150601f19603f3d011682016040523d82523d6000602084013e613b11565b606091505b508051613b305760405162461bcd60e51b8152600401610d29906148db565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611d41565b506001611d41565b613b648383613bcd565b613b716000848484613a50565b6111835760405162461bcd60e51b8152600401610d29906148db565b613b9681613d00565b60008181526009602052604090208054613baf90614d27565b15905061130f57600081815260096020526040812061130f91613e93565b6001600160a01b038216613c235760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610d29565b613c2c81612af9565b15613c795760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610d29565b6001600160a01b0382166000908152600660205260408120805460019290613ca2908490614bab565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000613d0b8261178c565b9050613d18600083612b16565b6001600160a01b0381166000908152600660205260408120805460019290613d41908490614ce4565b909155505060008281526005602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b828054613da790614d27565b90600052602060002090601f016020900481019282613dc95760008555613e0f565b82601f10613de257805160ff1916838001178555613e0f565b82800160010185558215613e0f579182015b82811115613e0f578251825591602001919060010190613df4565b50613e1b929150613ec9565b5090565b828054613e2b90614d27565b90600052602060002090601f016020900481019282613e4d5760008555613e0f565b82601f10613e665782800160ff19823516178555613e0f565b82800160010185558215613e0f579182015b82811115613e0f578235825591602001919060010190613e78565b508054613e9f90614d27565b6000825580601f10613eaf575050565b601f01602090049060005260206000209081019061130f91905b5b80821115613e1b5760008155600101613eca565b60008083601f840112613eef578182fd5b5081356001600160401b03811115613f05578182fd5b602083019150836020828501011115613f1d57600080fd5b9250929050565b600082601f830112613f34578081fd5b8135613f47613f4282614b84565b614b54565b818152846020838601011115613f5b578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112613f85578081fd5b8151613f93613f4282614b84565b818152846020838601011115613fa7578283fd5b611d41826020830160208701614cfb565b803561ffff8116811461158957600080fd5b600060208284031215613fdb578081fd5b8135611b2d81614dd3565b60008060408385031215613ff8578081fd5b823561400381614dd3565b9150602083013561401381614dd3565b809150509250929050565b600080600060608486031215614032578081fd5b833561403d81614dd3565b9250602084013561404d81614dd3565b929592945050506040919091013590565b60008060008060808587031215614073578081fd5b843561407e81614dd3565b9350602085013561408e81614dd3565b92506040850135915060608501356001600160401b038111156140af578182fd5b6140bb87828801613f24565b91505092959194509250565b600080604083850312156140d9578182fd5b82356140e481614dd3565b9150602083013561401381614de8565b600080600080600080600060e0888a03121561410e578283fd5b873561411981614dd3565b965061412760208901613fb8565b955060408801356001600160401b0380821115614142578485fd5b61414e8b838c01613f24565b965060608a0135955060808a0135915061416782614dd3565b90935060a08901359061417982614dd3565b90925060c0890135908082111561418e578283fd5b5061419b8a828b01613f24565b91505092959891949750929550565b600080604083850312156141bc578182fd5b82356141c781614dd3565b946020939093013593505050565b600080602083850312156141e7578182fd5b82356001600160401b03808211156141fd578384fd5b818501915085601f830112614210578384fd5b81358181111561421e578485fd5b8660208260051b8501011115614232578485fd5b60209290920196919550909350505050565b600060208284031215614255578081fd5b8135611b2d81614de8565b600060208284031215614271578081fd5b8151611b2d81614de8565b60006020828403121561428d578081fd5b5035919050565b6000602082840312156142a5578081fd5b8135611b2d81614df6565b6000602082840312156142c1578081fd5b8151611b2d81614df6565b6000602082840312156142dd578081fd5b81516001600160401b038111156142f2578182fd5b611d4184828501613f75565b60008060408385031215614310578182fd5b82516001600160401b03811115614325578283fd5b61433185828601613f75565b925050602083015190509250929050565b600060208284031215614353578081fd5b81356001600160401b03811115614368578182fd5b611d4184828501613f24565b600060208284031215614385578081fd5b611b2d82613fb8565b6000806000604084860312156143a2578081fd5b6143ab84613fb8565b925060208401356001600160401b038111156143c5578182fd5b6143d186828701613ede565b9497909650939450505050565b600080600080600060a086880312156143f5578283fd5b6143fe86613fb8565b945060208601356001600160401b0380821115614419578485fd5b61442589838a01613f24565b9550604088013594506060880135915061443e82614de8565b90925060808701359080821115614453578283fd5b5061446088828901613f24565b9150509295509295909350565b600080600060608486031215614481578081fd5b61448a84613fb8565b925060208401356001600160401b038111156144a4578182fd5b6144b086828701613f24565b92505060408401356144c181614e0c565b809150509250925092565b600080600080608085870312156144e1578182fd5b6144ea85613fb8565b935060208501356001600160401b0380821115614505578384fd5b61451188838901613f24565b94506040870135915061452382614e0c565b90925060608601359080821115614538578283fd5b506140bb87828801613f24565b6000806000806080858703121561455a578182fd5b61456385613fb8565b935061457160208601613fb8565b9250604085013561458181614dd3565b9396929550929360600135925050565b6000806000806000608086880312156145a8578283fd5b6145b186613fb8565b94506145bf60208701613fb8565b93506040860135925060608601356001600160401b038111156145e0578182fd5b6145ec88828901613ede565b969995985093965092949392505050565b60006020828403121561460e578081fd5b5051919050565b60008060408385031215614627578182fd5b50508035926020909101359150565b60008060408385031215614648578182fd5b505080516020909101519092909150565b60008060006060848603121561466d578081fd5b833592506020840135915060408401356001600160401b03811115614690578182fd5b61469c86828701613f24565b9150509250925092565b6000602082840312156146b7578081fd5b8151611b2d81614e0c565b6000602082840312156146d3578081fd5b815160ff81168114611b2d578182fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452614724816020860160208601614cfb565b601f01601f19169290920160200192915050565b6000815161474a818560208601614cfb565b9290920192915050565b60609190911b6bffffffffffffffffffffffff1916815260140190565b8183823760009101908152919050565b60008251614793818460208701614cfb565b9190910192915050565b600083516147af818460208801614cfb565b8351908301906147c3818360208801614cfb565b01949350505050565b600080845482600182811c9150808316806147e857607f831692505b602080841082141561480857634e487b7160e01b87526022600452602487fd5b81801561481c576001811461482d57614859565b60ff19861689528489019650614859565b60008b815260209020885b868110156148515781548b820152908501908301614838565b505084890196505b5050505050506122508185614738565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061489c9083018461470c565b9695505050505050565b602081526000611b2d602083018461470c565b6040815260006148cc604083018561470c565b90508260208301529392505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f556e6976657273616c4f4e46543732313a205370656369616c206d696e74206960408201527073206e6f74206f70656e6564207965742160781b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b61ffff861681526001600160a01b038516602082015260a060408201819052600090614a329083018661470c565b84151560608401528281036080840152614a4c818561470c565b98975050505050505050565b61ffff841681526040602082015260006122506040830184866146e3565b61ffff8716815260c060208201526000614a9360c083018861470c565b8281036040840152614aa5818861470c565b6001600160a01b0387811660608601528616608085015283810360a08501529050614ad0818561470c565b9998505050505050505050565b61ffff85168152608060208201526000614afa608083018661470c565b6001600160401b03851660408401528281036060840152614b1b818561470c565b979650505050505050565b600061ffff808816835280871660208401525084604083015260806060830152614b1b6080830184866146e3565b604051601f8201601f191681016001600160401b0381118282101715614b7c57614b7c614dbd565b604052919050565b60006001600160401b03821115614b9d57614b9d614dbd565b50601f01601f191660200190565b60008219821115614bbe57614bbe614d91565b500190565b600082614bd257614bd2614da7565b500490565b600181815b80851115614c12578160001904821115614bf857614bf8614d91565b80851615614c0557918102915b93841c9390800290614bdc565b509250929050565b6000611b2d60ff841683600082614c3357506001610e79565b81614c4057506000610e79565b8160018114614c565760028114614c6057614c7c565b6001915050610e79565b60ff841115614c7157614c71614d91565b50506001821b610e79565b5060208310610133831016604e8410600b8410161715614c9f575081810a610e79565b614ca98383614bd7565b8060001904821115614cbd57614cbd614d91565b029392505050565b6000816000190483118215151615614cdf57614cdf614d91565b500290565b600082821015614cf657614cf6614d91565b500390565b60005b83811015614d16578181015183820152602001614cfe565b8381111561186d5750506000910152565b600181811c90821680614d3b57607f821691505b60208210811415614d5c57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415614d7657614d76614d91565b5060010190565b600082614d8c57614d8c614da7565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461130f57600080fd5b801515811461130f57600080fd5b6001600160e01b03198116811461130f57600080fd5b6001600160401b038116811461130f57600080fdfea2646970667358221220b3c29b74c3bc15798a1180b41ee4df1f1dd2f0e5eb104fa1a41af96e7d6c233964736f6c634300080400334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
  "deployedBytecode": "0x6080604052600436106103ee5760003560e01c80637533d78811610208578063bd89cc7111610118578063e1d4c870116100ab578063eb8d72b71161007a578063eb8d72b714610c2d578063f2fde38b14610c4d578063f36bc30d14610c6d578063f5ecbdbc14610c80578063fb0bc9d714610ca057600080fd5b8063e1d4c87014610b8e578063e67cf48214610ba4578063e985e9c514610bc4578063ea9d6d2914610c0d57600080fd5b8063d1deba1f116100e7578063d1deba1f14610b33578063d5aaffe314610b46578063d721161214610b66578063dd68832314610b7b57600080fd5b8063bd89cc7114610aa3578063c32e00fe14610ad3578063c87b56dd14610af3578063cbed8b9c14610b1357600080fd5b8063a80d71bb1161019b578063ac4976a11161016a578063ac4976a1146109f5578063b187bd2614610a15578063b353aaa714610a2f578063b473171614610a63578063b88d4fde14610a8357600080fd5b8063a80d71bb14610979578063a8602fea1461098f578063a945bf80146109af578063a966fa33146109c557600080fd5b80638da5cb5b116101d75780638da5cb5b146109065780639511e65c1461092457806395d89b4114610944578063a22cb4651461095957600080fd5b80637533d7881461088357806378624f09146108a35780637e10ab0d146108b957806387b8ff27146108e657600080fd5b806342842e0e1161030357806357a736091161029657806366ad5c8a1161026557806366ad5c8a146107f85780636aa99da3146108185780636c8b703f1461082e57806370a082311461084e578063715018a61461086e57600080fd5b806357a73609146107465780635b8c41e6146107735780636352211e146107c257806363b468ce146107e257600080fd5b806349afc6e5116102d257806349afc6e5146106da57806351463d5b14610707578063519056361461071d57806351d982b41461073057600080fd5b806342842e0e1461065a57806342d65a8d1461067a578063450a32921461069a5780634626402b146106ba57600080fd5b80630f78a4d511610386578063197e6cf011610355578063197e6cf0146105a457806323b872dd146105c45780632a205e3d146105e45780632db11544146106195780633d8b38f61461063a57600080fd5b80630f78a4d51461052457806310ddb13714610544578063115763311461056457806316c38b3c1461058457600080fd5b806307e0db17116103c257806307e0db171461048c578063081812fc146104ac578063095ea7b3146104e45780630f5a9d011461050457600080fd5b80621d3567146103f357806301ffc9a7146104155780630442bfa81461044a57806306fdde031461046a575b600080fd5b3480156103ff57600080fd5b5061041361040e3660046144cc565b610cb5565b005b34801561042157600080fd5b50610435610430366004614294565b610e5c565b60405190151581526020015b60405180910390f35b34801561045657600080fd5b50610413610465366004614615565b610e7f565b34801561047657600080fd5b5061047f610eb4565b60405161044191906148a6565b34801561049857600080fd5b506104136104a7366004614374565b610f46565b3480156104b857600080fd5b506104cc6104c736600461427c565b610fea565b6040516001600160a01b039091168152602001610441565b3480156104f057600080fd5b506104136104ff3660046141aa565b611072565b34801561051057600080fd5b5061041361051f366004613fca565b611188565b34801561053057600080fd5b5061041361053f3660046140c7565b6111d4565b34801561055057600080fd5b5061041361055f366004614374565b61120c565b34801561057057600080fd5b5061041361057f366004613fca565b611286565b34801561059057600080fd5b5061041361059f366004614244565b6112d2565b3480156105b057600080fd5b506104136105bf36600461427c565b611312565b3480156105d057600080fd5b506104136105df36600461401e565b611341565b3480156105f057600080fd5b506106046105ff3660046143de565b611373565b60408051928352602083019190915201610441565b61062c61062736600461427c565b61144d565b604051908152602001610441565b34801561064657600080fd5b5061043561065536600461438e565b61158e565b34801561066657600080fd5b5061041361067536600461401e565b61165a565b34801561068657600080fd5b5061041361069536600461438e565b611675565b3480156106a657600080fd5b506104136106b5366004614659565b611726565b3480156106c657600080fd5b50601d546104cc906001600160a01b031681565b3480156106e657600080fd5b5061062c6106f536600461427c565b60166020526000908152604090205481565b34801561071357600080fd5b5061062c60105481565b61041361072b3660046140f4565b61177d565b34801561073c57600080fd5b5061062c600e5481565b34801561075257600080fd5b5061062c61076136600461427c565b60176020526000908152604090205481565b34801561077f57600080fd5b5061062c61078e36600461446d565b6002602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b3480156107ce57600080fd5b506104cc6107dd36600461427c565b61178c565b3480156107ee57600080fd5b5061062c60195481565b34801561080457600080fd5b506104136108133660046144cc565b611803565b34801561082457600080fd5b5061062c600b5481565b34801561083a57600080fd5b5061047f61084936600461427c565b611873565b34801561085a57600080fd5b5061062c610869366004613fca565b61190d565b34801561087a57600080fd5b50610413611994565b34801561088f57600080fd5b5061047f61089e366004614374565b6119ca565b3480156108af57600080fd5b5061062c601a5481565b3480156108c557600080fd5b5061062c6108d4366004613fca565b60136020526000908152604090205481565b3480156108f257600080fd5b506104136109013660046140c7565b6119e3565b34801561091257600080fd5b506000546001600160a01b03166104cc565b34801561093057600080fd5b5061041361093f3660046141aa565b611a17565b34801561095057600080fd5b5061047f611a5e565b34801561096557600080fd5b506104136109743660046140c7565b611a6d565b34801561098557600080fd5b5061062c600f5481565b34801561099b57600080fd5b506104136109aa366004613fca565b611a78565b3480156109bb57600080fd5b5061062c600d5481565b3480156109d157600080fd5b506104356109e0366004613fca565b60156020526000908152604090205460ff1681565b348015610a0157600080fd5b50610435610a103660046141d5565b611ac4565b348015610a2157600080fd5b506012546104359060ff1681565b348015610a3b57600080fd5b506104cc7f000000000000000000000000000000000000000000000000000000000000000081565b348015610a6f57600080fd5b50610413610a7e366004614342565b611b34565b348015610a8f57600080fd5b50610413610a9e36600461405e565b611b71565b348015610aaf57600080fd5b50610435610abe366004613fca565b60146020526000908152604090205460ff1681565b348015610adf57600080fd5b50610413610aee36600461427c565b611ba3565b348015610aff57600080fd5b5061047f610b0e36600461427c565b611bd2565b348015610b1f57600080fd5b50610413610b2e366004614591565b611d49565b610413610b413660046144cc565b611e00565b348015610b5257600080fd5b50610435610b613660046141d5565b611f52565b348015610b7257600080fd5b50610413611fa0565b61062c610b893660046141d5565b6120d0565b348015610b9a57600080fd5b5061062c600c5481565b348015610bb057600080fd5b50610413610bbf36600461427c565b612259565b348015610bd057600080fd5b50610435610bdf366004613fe6565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205460ff1690565b348015610c1957600080fd5b50610413610c2836600461427c565b612641565b348015610c3957600080fd5b50610413610c4836600461438e565b612670565b348015610c5957600080fd5b50610413610c68366004613fca565b6126f9565b61062c610c7b3660046141d5565b612791565b348015610c8c57600080fd5b5061047f610c9b366004614545565b612904565b348015610cac57600080fd5b5061047f6129bb565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614610d325760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff841660009081526001602052604081208054610d5090614d27565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7c90614d27565b8015610dc95780601f10610d9e57610100808354040283529160200191610dc9565b820191906000526020600020905b815481529060010190602001808311610dac57829003601f168201915b5050505050905080518451148015610dee575080805190602001208480519060200120145b610e495760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6044820152651b9d1c9858dd60d21b6064820152608401610d29565b610e55858585856129c8565b5050505050565b60006001600160e01b031982161580610e795750610e7982612ab9565b92915050565b6000546001600160a01b03163314610ea95760405162461bcd60e51b8152600401610d299061497e565b600d91909155600e55565b606060038054610ec390614d27565b80601f0160208091040260200160405190810160405280929190818152602001828054610eef90614d27565b8015610f3c5780601f10610f1157610100808354040283529160200191610f3c565b820191906000526020600020905b815481529060010190602001808311610f1f57829003601f168201915b5050505050905090565b6000546001600160a01b03163314610f705760405162461bcd60e51b8152600401610d299061497e565b6040516307e0db1760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b158015610fd657600080fd5b505af1158015610e55573d6000803e3d6000fd5b6000610ff582612af9565b6110565760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610d29565b506000908152600760205260409020546001600160a01b031690565b600061107d8261178c565b9050806001600160a01b0316836001600160a01b031614156110eb5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610d29565b336001600160a01b038216148061110757506111078133610bdf565b6111795760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610d29565b6111838383612b16565b505050565b6000546001600160a01b031633146111b25760405162461bcd60e51b8152600401610d299061497e565b601b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146111fe5760405162461bcd60e51b8152600401610d299061497e565b6112088282612b84565b5050565b6000546001600160a01b031633146112365760405162461bcd60e51b8152600401610d299061497e565b6040516310ddb13760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb13790602401610fbc565b6000546001600160a01b031633146112b05760405162461bcd60e51b8152600401610d299061497e565b601c80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146112fc5760405162461bcd60e51b8152600401610d299061497e565b6012805482151560ff1990911617905550565b50565b6000546001600160a01b0316331461133c5760405162461bcd60e51b8152600401610d299061497e565b601955565b61134c335b82612baf565b6113685760405162461bcd60e51b8152600401610d29906149b3565b611183838383612c98565b6000806000868660405160200161138b9291906148b9565b60408051601f198184030181529082905263040a7bb160e41b825291506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340a7bb10906113ef908b90309086908b908b90600401614a04565b604080518083038186803b15801561140657600080fd5b505afa15801561141a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143e9190614636565b92509250509550959350505050565b60006010544210156114ba5760405162461bcd60e51b815260206004820152603060248201527f556e6976657273616c4f4e46543732313a205075626c6963206d696e7420697360448201526f206e6f74206f70656e6564207965742160801b6064820152608401610d29565b336000908152601360205260409020546003906114d8908490614bab565b11156115325760405162461bcd60e51b8152602060048201526024808201527f556e6976657273616c4f4e46543732313a204d696e7420636f756e74206c696d6044820152631a5d195960e21b6064820152608401610d29565b61153e82600d54612e34565b3360008181526013602052604090205461157a919061155e908590614bab565b6001600160a01b03909116600090815260136020526040902055565b6001600b54610e799190614ce4565b919050565b61ffff8316600090815260016020526040812080548291906115af90614d27565b80601f01602080910402602001604051908101604052809291908181526020018280546115db90614d27565b80156116285780601f106115fd57610100808354040283529160200191611628565b820191906000526020600020905b81548152906001019060200180831161160b57829003601f168201915b50505050509050838360405161163f929190614771565b60405180910390208180519060200120149150509392505050565b61118383838360405180602001604052806000815250611b71565b6000546001600160a01b0316331461169f5760405162461bcd60e51b8152600401610d299061497e565b6040516342d65a8d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d906116ef90869086908690600401614a58565b600060405180830381600087803b15801561170957600080fd5b505af115801561171d573d6000803e3d6000fd5b50505050505050565b6000546001600160a01b031633146117505760405162461bcd60e51b8152600401610d299061497e565b600b839055600c829055805161176d906011906020840190613d9b565b506012805460ff19169055505050565b61171d878787878787876130f2565b6000818152600560205260408120546001600160a01b031680610e795760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610d29565b3330146118615760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b6064820152608401610d29565b61186d84848484613249565b50505050565b6018602052600090815260409020805461188c90614d27565b80601f01602080910402602001604051908101604052809291908181526020018280546118b890614d27565b80156119055780601f106118da57610100808354040283529160200191611905565b820191906000526020600020905b8154815290600101906020018083116118e857829003601f168201915b505050505081565b60006001600160a01b0382166119785760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610d29565b506001600160a01b031660009081526006602052604090205490565b6000546001600160a01b031633146119be5760405162461bcd60e51b8152600401610d299061497e565b6119c860006132e4565b565b6001602052600090815260409020805461188c90614d27565b6000546001600160a01b03163314611a0d5760405162461bcd60e51b8152600401610d299061497e565b6112088282613334565b6000546001600160a01b03163314611a415760405162461bcd60e51b8152600401610d299061497e565b6001600160a01b0391909116600090815260136020526040902055565b606060048054610ec390614d27565b61120833838361335f565b6000546001600160a01b03163314611aa25760405162461bcd60e51b8152600401610d299061497e565b601d80546001600160a01b0319166001600160a01b0392909216919091179055565b6000611b2d83838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050601a54604051909250611b1291503390602001614754565b6040516020818303038152906040528051906020012061342e565b9392505050565b6000546001600160a01b03163314611b5e5760405162461bcd60e51b8152600401610d299061497e565b8051611208906011906020840190613d9b565b611b7b3383612baf565b611b975760405162461bcd60e51b8152600401610d29906149b3565b61186d84848484613444565b6000546001600160a01b03163314611bcd5760405162461bcd60e51b8152600401610d299061497e565b601a55565b6060611bdd82612af9565b611c435760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610d29565b60008281526009602052604081208054611c5c90614d27565b80601f0160208091040260200160405190810160405280929190818152602001828054611c8890614d27565b8015611cd55780601f10611caa57610100808354040283529160200191611cd5565b820191906000526020600020905b815481529060010190602001808311611cb857829003601f168201915b505050505090506000611cf360408051602081019091526000815290565b9050805160001415611d06575092915050565b815115611d38578082604051602001611d2092919061479d565b60405160208183030381529060405292505050919050565b611d4184613477565b949350505050565b6000546001600160a01b03163314611d735760405162461bcd60e51b8152600401610d299061497e565b6040516332fb62e760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c90611dc79088908890889088908890600401614b26565b600060405180830381600087803b158015611de157600080fd5b505af1158015611df5573d6000803e3d6000fd5b505050505050505050565b61ffff84166000908152600260205260408082209051611e21908690614781565b90815260408051602092819003830190206001600160401b03861660009081529252902054905080611ea15760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b6064820152608401610d29565b815160208301208114611f005760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b6064820152608401610d29565b61ffff85166000908152600260205260408082209051611f21908790614781565b90815260408051602092819003830190206001600160401b03871660009081529252902055610e5585858585613249565b6000611b2d83838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050601954604051909250611b1291503390602001614754565b6000546001600160a01b03163314611fca5760405162461bcd60e51b8152600401610d299061497e565b601c546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561200e57600080fd5b505afa158015612022573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204691906145fd565b601c54601d5460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101849052929350169063a9059cbb90604401602060405180830381600087803b15801561209857600080fd5b505af11580156120ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112089190614260565b6000620151806010546120e39190614ce4565b4210156121025760405162461bcd60e51b8152600401610d299061492d565b828261215082828080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050601a54604051909250611b1291503390602001614754565b6121b55760405162461bcd60e51b815260206004820152603060248201527f556e6976657273616c4f4e46543732313a2041646472657373206973204e4f5460448201526f20467265656c6973746564207965742160801b6064820152608401610d29565b3360009081526015602052604090205460ff161561222a5760405162461bcd60e51b815260206004820152602c60248201527f556e6976657273616c4f4e46543732313a20467265656e6c69737420616c726560448201526b61647920636c61696d65642160a01b6064820152608401610d29565b61223660016000612e34565b612241336001613334565b6001600b546122509190614ce4565b95945050505050565b61226281612af9565b6122be5760405162461bcd60e51b815260206004820152602760248201527f556e6976657273616c4f4e46543732313a20546f6b656e20646f6573206e6f746044820152662065786973742160c81b6064820152608401610d29565b336122c88261178c565b6001600160a01b03161461231e5760405162461bcd60e51b815260206004820181905260248201527f556e6976657273616c4f4e46543732313a204e6f7420796f757220746f6b656e6044820152606401610d29565b6000818152601660205260409020546123855760405162461bcd60e51b815260206004820152602360248201527f556e6976657273616c4f4e46543732313a20506f7a2062616c616e636520697360448201526220302160e81b6064820152608401610d29565b601054612395906276a700614bab565b42116123fd5760405162461bcd60e51b815260206004820152603160248201527f556e6976657273616c4f4e46543732313a20506f7a207769746864726177206960448201527073206e6f74206f70656e6564207965742160781b6064820152608401610d29565b60005b600981101561120857426124178262278d00614cc5565b601054612427906276a700614bab565b6124319190614bab565b111580156124705750612445816001614bab565b6124529062278d00614cc5565b601054612462906276a700614bab565b61246c9190614bab565b4211155b1561262f5760008281526017602052604090205481146124ec5760405162461bcd60e51b815260206004820152603160248201527f556e6976657273616c4f4e46543732313a20506f7a2077697468647261772074604482015270696d65206973206e6f742072696768742160781b6064820152608401610d29565b6124f7816001614bab565b60008381526017602090815260409182902092909255601c54815163313ce56760e01b815291516001600160a01b039091169263a9059cbb923392606492869263313ce5679260048083019392829003018186803b15801561255857600080fd5b505afa15801561256c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259091906146c2565b61259b90600a614c1a565b6125a79061029a614cc5565b6125b19190614bc3565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156125f757600080fd5b505af115801561260b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111839190614260565b8061263981614d62565b915050612400565b6000546001600160a01b0316331461266b5760405162461bcd60e51b8152600401610d299061497e565b601055565b6000546001600160a01b0316331461269a5760405162461bcd60e51b8152600401610d299061497e565b61ffff831660009081526001602052604090206126b8908383613e1f565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab8383836040516126ec93929190614a58565b60405180910390a1505050565b6000546001600160a01b031633146127235760405162461bcd60e51b8152600401610d299061497e565b6001600160a01b0381166127885760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d29565b61130f816132e4565b6000620151806010546127a49190614ce4565b4210156127c35760405162461bcd60e51b8152600401610d299061492d565b828261281182828080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050601954604051909250611b1291503390602001614754565b6128775760405162461bcd60e51b815260206004820152603160248201527f556e6976657273616c4f4e46543732313a2041646472657373206973204e4f5460448201527020477265656e6c6973746564207965742160781b6064820152608401610d29565b3360009081526014602052604090205460ff16156128ec5760405162461bcd60e51b815260206004820152602c60248201527f556e6976657273616c4f4e46543732313a20477265656e6c69737420616c726560448201526b61647920636c61696d65642160a01b6064820152608401610d29565b6128f96001600e54612e34565b612241336001612b84565b604051633d7b2f6f60e21b815261ffff808616600483015284166024820152306044820152606481018290526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc9060840160006040518083038186803b15801561297f57600080fd5b505afa158015612993573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261225091908101906142cc565b6011805461188c90614d27565b604051633356ae4560e11b815230906366ad5c8a906129f1908790879087908790600401614add565b600060405180830381600087803b158015612a0b57600080fd5b505af1925050508015612a1c575060015b61186d578080519060200120600260008661ffff1661ffff16815260200190815260200160002084604051612a519190614781565b9081526040805191829003602090810183206001600160401b0387166000908152915220919091557fe6f254030bcb01ffd20558175c13fcaed6d1520be7becee4c961b65f79243b0d90612aac908690869086908690614add565b60405180910390a161186d565b60006001600160e01b031982166380ac58cd60e01b1480612aea57506001600160e01b03198216635b5e139f60e01b145b80610e795750610e798261354e565b6000908152600560205260409020546001600160a01b0316151590565b600081815260076020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612b4b8261178c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001600160a01b03919091166000908152601460205260409020805460ff1916911515919091179055565b6000612bba82612af9565b612c1b5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610d29565b6000612c268361178c565b9050806001600160a01b0316846001600160a01b03161480612c6d57506001600160a01b0380821660009081526008602090815260408083209388168352929052205460ff165b80611d415750836001600160a01b0316612c8684610fea565b6001600160a01b031614949350505050565b826001600160a01b0316612cab8261178c565b6001600160a01b031614612d0f5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610d29565b6001600160a01b038216612d715760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610d29565b612d7c600082612b16565b6001600160a01b0383166000908152600660205260408120805460019290612da5908490614ce4565b90915550506001600160a01b0382166000908152600660205260408120805460019290612dd3908490614bab565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600c54600183600b54612e479190614bab565b612e519190614ce4565b1115612eb05760405162461bcd60e51b815260206004820152602860248201527f556e6976657273616c4f4e46543732313a206d6178206d696e74206c696d6974604482015267081c995858da195960c21b6064820152608401610d29565b60125460ff1615612f035760405162461bcd60e51b815260206004820181905260248201527f556e6976657273616c4f4e46543732313a204d696e74206973205061757365646044820152606401610d29565b801561303d57601b54601d546040805163313ce56760e01b815290516001600160a01b03938416936323b872dd933393911691859163313ce567916004808301926020929190829003018186803b158015612f5d57600080fd5b505afa158015612f71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9591906146c2565b612fa090600a614c1a565b612faa8688614cc5565b612fb49190614cc5565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b15801561300357600080fd5b505af1158015613017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061303b9190614260565b505b60005b828110156130c957600f54600b80546000908152601660205260409020919091555461306c3382613583565b6130a081601161307b8461359d565b60405160200161308c9291906147cc565b6040516020818303038152906040526136b6565b600b80549060006130b083614d62565b91905055505080806130c190614d62565b915050613040565b50600c546130d8906001614bab565b600b541415611208576012805460ff191660011790555050565b6130fe87878787613741565b600085856040516020016131139291906148b9565b6040516020818303038152906040529050613131878286868661382a565b604051630f428ae960e31b815261ffff881660048201523060248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637a1457489060440160206040518083038186803b15801561319d57600080fd5b505afa1580156131b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d591906146a6565b9050866040516131e59190614781565b604080519182900382208883526001600160401b03841660208401529161ffff8b16916001600160a01b038d16917f024797cc77ce15dc717112d54fb1df125fdfd8c81344fb046c5e074427ce1543910160405180910390a4505050505050505050565b6000808280602001905181019061326091906142fe565b601482015191935091506132758782846139c4565b806001600160a01b03168660405161328d9190614781565b604080519182900382208583526001600160401b03891660208401529161ffff8b16917f64e10c37f404d128982dce114f5d233c14c5c7f6d8db93099e3d99dacb9e27ba910160405180910390a450505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03919091166000908152601560205260409020805460ff1916911515919091179055565b816001600160a01b0316836001600160a01b031614156133c15760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610d29565b6001600160a01b03838116600081815260086020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60008261343b85846139ce565b14949350505050565b61344f848484612c98565b61345b84848484613a50565b61186d5760405162461bcd60e51b8152600401610d29906148db565b606061348282612af9565b6134e65760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610d29565b60006134fd60408051602081019091526000815290565b9050600081511161351d5760405180602001604052806000815250611b2d565b806135278461359d565b60405160200161353892919061479d565b6040516020818303038152906040529392505050565b60006001600160e01b03198216637bb0080b60e01b1480610e7957506301ffc9a760e01b6001600160e01b0319831614610e79565b611208828260405180602001604052806000815250613b5a565b6060816135c15750506040805180820190915260018152600360fc1b602082015290565b8160005b81156135eb57806135d581614d62565b91506135e49050600a83614bc3565b91506135c5565b6000816001600160401b0381111561361357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561363d576020820181803683370190505b5090505b8415611d4157613652600183614ce4565b915061365f600a86614d7d565b61366a906030614bab565b60f81b81838151811061368d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506136af600a86614bc3565b9450613641565b6136bf82612af9565b6137225760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610d29565b6000828152600960209081526040909120825161118392840190613d9b565b61374a33611346565b6137ad5760405162461bcd60e51b815260206004820152602e60248201527f4f4e46543732313a2073656e642063616c6c6572206973206e6f74206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b6064820152608401610d29565b836001600160a01b03166137c08261178c565b6001600160a01b0316146138215760405162461bcd60e51b815260206004820152602260248201527f4f4e46543732313a2073656e642066726f6d20696e636f7272656374206f776e60448201526132b960f11b6064820152608401610d29565b61186d81613b8d565b61ffff85166000908152600160205260408120805461384890614d27565b80601f016020809104026020016040519081016040528092919081815260200182805461387490614d27565b80156138c15780601f10613896576101008083540402835291602001916138c1565b820191906000526020600020905b8154815290600101906020018083116138a457829003601f168201915b505050505090508051600014156139335760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201526f61207472757374656420736f7572636560801b6064820152608401610d29565b60405162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c580310090349061398a908a9086908b908b908b908b90600401614a76565b6000604051808303818588803b1580156139a357600080fd5b505af11580156139b7573d6000803e3d6000fd5b5050505050505050505050565b6111838282613583565b600081815b8451811015613a485760008582815181106139fe57634e487b7160e01b600052603260045260246000fd5b60200260200101519050808311613a245760008381526020829052604090209250613a35565b600081815260208490526040902092505b5080613a4081614d62565b9150506139d3565b509392505050565b60006001600160a01b0384163b15613b5257604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613a94903390899088908890600401614869565b602060405180830381600087803b158015613aae57600080fd5b505af1925050508015613ade575060408051601f3d908101601f19168201909252613adb918101906142b0565b60015b613b38573d808015613b0c576040519150601f19603f3d011682016040523d82523d6000602084013e613b11565b606091505b508051613b305760405162461bcd60e51b8152600401610d29906148db565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611d41565b506001611d41565b613b648383613bcd565b613b716000848484613a50565b6111835760405162461bcd60e51b8152600401610d29906148db565b613b9681613d00565b60008181526009602052604090208054613baf90614d27565b15905061130f57600081815260096020526040812061130f91613e93565b6001600160a01b038216613c235760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610d29565b613c2c81612af9565b15613c795760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610d29565b6001600160a01b0382166000908152600660205260408120805460019290613ca2908490614bab565b909155505060008181526005602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000613d0b8261178c565b9050613d18600083612b16565b6001600160a01b0381166000908152600660205260408120805460019290613d41908490614ce4565b909155505060008281526005602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b828054613da790614d27565b90600052602060002090601f016020900481019282613dc95760008555613e0f565b82601f10613de257805160ff1916838001178555613e0f565b82800160010185558215613e0f579182015b82811115613e0f578251825591602001919060010190613df4565b50613e1b929150613ec9565b5090565b828054613e2b90614d27565b90600052602060002090601f016020900481019282613e4d5760008555613e0f565b82601f10613e665782800160ff19823516178555613e0f565b82800160010185558215613e0f579182015b82811115613e0f578235825591602001919060010190613e78565b508054613e9f90614d27565b6000825580601f10613eaf575050565b601f01602090049060005260206000209081019061130f91905b5b80821115613e1b5760008155600101613eca565b60008083601f840112613eef578182fd5b5081356001600160401b03811115613f05578182fd5b602083019150836020828501011115613f1d57600080fd5b9250929050565b600082601f830112613f34578081fd5b8135613f47613f4282614b84565b614b54565b818152846020838601011115613f5b578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112613f85578081fd5b8151613f93613f4282614b84565b818152846020838601011115613fa7578283fd5b611d41826020830160208701614cfb565b803561ffff8116811461158957600080fd5b600060208284031215613fdb578081fd5b8135611b2d81614dd3565b60008060408385031215613ff8578081fd5b823561400381614dd3565b9150602083013561401381614dd3565b809150509250929050565b600080600060608486031215614032578081fd5b833561403d81614dd3565b9250602084013561404d81614dd3565b929592945050506040919091013590565b60008060008060808587031215614073578081fd5b843561407e81614dd3565b9350602085013561408e81614dd3565b92506040850135915060608501356001600160401b038111156140af578182fd5b6140bb87828801613f24565b91505092959194509250565b600080604083850312156140d9578182fd5b82356140e481614dd3565b9150602083013561401381614de8565b600080600080600080600060e0888a03121561410e578283fd5b873561411981614dd3565b965061412760208901613fb8565b955060408801356001600160401b0380821115614142578485fd5b61414e8b838c01613f24565b965060608a0135955060808a0135915061416782614dd3565b90935060a08901359061417982614dd3565b90925060c0890135908082111561418e578283fd5b5061419b8a828b01613f24565b91505092959891949750929550565b600080604083850312156141bc578182fd5b82356141c781614dd3565b946020939093013593505050565b600080602083850312156141e7578182fd5b82356001600160401b03808211156141fd578384fd5b818501915085601f830112614210578384fd5b81358181111561421e578485fd5b8660208260051b8501011115614232578485fd5b60209290920196919550909350505050565b600060208284031215614255578081fd5b8135611b2d81614de8565b600060208284031215614271578081fd5b8151611b2d81614de8565b60006020828403121561428d578081fd5b5035919050565b6000602082840312156142a5578081fd5b8135611b2d81614df6565b6000602082840312156142c1578081fd5b8151611b2d81614df6565b6000602082840312156142dd578081fd5b81516001600160401b038111156142f2578182fd5b611d4184828501613f75565b60008060408385031215614310578182fd5b82516001600160401b03811115614325578283fd5b61433185828601613f75565b925050602083015190509250929050565b600060208284031215614353578081fd5b81356001600160401b03811115614368578182fd5b611d4184828501613f24565b600060208284031215614385578081fd5b611b2d82613fb8565b6000806000604084860312156143a2578081fd5b6143ab84613fb8565b925060208401356001600160401b038111156143c5578182fd5b6143d186828701613ede565b9497909650939450505050565b600080600080600060a086880312156143f5578283fd5b6143fe86613fb8565b945060208601356001600160401b0380821115614419578485fd5b61442589838a01613f24565b9550604088013594506060880135915061443e82614de8565b90925060808701359080821115614453578283fd5b5061446088828901613f24565b9150509295509295909350565b600080600060608486031215614481578081fd5b61448a84613fb8565b925060208401356001600160401b038111156144a4578182fd5b6144b086828701613f24565b92505060408401356144c181614e0c565b809150509250925092565b600080600080608085870312156144e1578182fd5b6144ea85613fb8565b935060208501356001600160401b0380821115614505578384fd5b61451188838901613f24565b94506040870135915061452382614e0c565b90925060608601359080821115614538578283fd5b506140bb87828801613f24565b6000806000806080858703121561455a578182fd5b61456385613fb8565b935061457160208601613fb8565b9250604085013561458181614dd3565b9396929550929360600135925050565b6000806000806000608086880312156145a8578283fd5b6145b186613fb8565b94506145bf60208701613fb8565b93506040860135925060608601356001600160401b038111156145e0578182fd5b6145ec88828901613ede565b969995985093965092949392505050565b60006020828403121561460e578081fd5b5051919050565b60008060408385031215614627578182fd5b50508035926020909101359150565b60008060408385031215614648578182fd5b505080516020909101519092909150565b60008060006060848603121561466d578081fd5b833592506020840135915060408401356001600160401b03811115614690578182fd5b61469c86828701613f24565b9150509250925092565b6000602082840312156146b7578081fd5b8151611b2d81614e0c565b6000602082840312156146d3578081fd5b815160ff81168114611b2d578182fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452614724816020860160208601614cfb565b601f01601f19169290920160200192915050565b6000815161474a818560208601614cfb565b9290920192915050565b60609190911b6bffffffffffffffffffffffff1916815260140190565b8183823760009101908152919050565b60008251614793818460208701614cfb565b9190910192915050565b600083516147af818460208801614cfb565b8351908301906147c3818360208801614cfb565b01949350505050565b600080845482600182811c9150808316806147e857607f831692505b602080841082141561480857634e487b7160e01b87526022600452602487fd5b81801561481c576001811461482d57614859565b60ff19861689528489019650614859565b60008b815260209020885b868110156148515781548b820152908501908301614838565b505084890196505b5050505050506122508185614738565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061489c9083018461470c565b9695505050505050565b602081526000611b2d602083018461470c565b6040815260006148cc604083018561470c565b90508260208301529392505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f556e6976657273616c4f4e46543732313a205370656369616c206d696e74206960408201527073206e6f74206f70656e6564207965742160781b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b61ffff861681526001600160a01b038516602082015260a060408201819052600090614a329083018661470c565b84151560608401528281036080840152614a4c818561470c565b98975050505050505050565b61ffff841681526040602082015260006122506040830184866146e3565b61ffff8716815260c060208201526000614a9360c083018861470c565b8281036040840152614aa5818861470c565b6001600160a01b0387811660608601528616608085015283810360a08501529050614ad0818561470c565b9998505050505050505050565b61ffff85168152608060208201526000614afa608083018661470c565b6001600160401b03851660408401528281036060840152614b1b818561470c565b979650505050505050565b600061ffff808816835280871660208401525084604083015260806060830152614b1b6080830184866146e3565b604051601f8201601f191681016001600160401b0381118282101715614b7c57614b7c614dbd565b604052919050565b60006001600160401b03821115614b9d57614b9d614dbd565b50601f01601f191660200190565b60008219821115614bbe57614bbe614d91565b500190565b600082614bd257614bd2614da7565b500490565b600181815b80851115614c12578160001904821115614bf857614bf8614d91565b80851615614c0557918102915b93841c9390800290614bdc565b509250929050565b6000611b2d60ff841683600082614c3357506001610e79565b81614c4057506000610e79565b8160018114614c565760028114614c6057614c7c565b6001915050610e79565b60ff841115614c7157614c71614d91565b50506001821b610e79565b5060208310610133831016604e8410600b8410161715614c9f575081810a610e79565b614ca98383614bd7565b8060001904821115614cbd57614cbd614d91565b029392505050565b6000816000190483118215151615614cdf57614cdf614d91565b500290565b600082821015614cf657614cf6614d91565b500390565b60005b83811015614d16578181015183820152602001614cfe565b8381111561186d5750506000910152565b600181811c90821680614d3b57607f821691505b60208210811415614d5c57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415614d7657614d76614d91565b5060010190565b600082614d8c57614d8c614da7565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461130f57600080fd5b801515811461130f57600080fd5b6001600160e01b03198116811461130f57600080fd5b6001600160401b038116811461130f57600080fdfea2646970667358221220b3c29b74c3bc15798a1180b41ee4df1f1dd2f0e5eb104fa1a41af96e7d6c233964736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "estimateSendFee(uint16,bytes,uint256,bool,bytes)": {
        "details": "estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`) _dstChainId - L0 defined chain id to send tokens too _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain _tokenId - token Id to transfer _useZro - indicates to use zro to pay L0 fees _adapterParams - flexible bytes array to indicate messaging adapter services in L0"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "sendFrom(address,uint16,bytes,uint256,address,address,bytes)": {
        "details": "send token `_tokenId` to (`_dstChainId`, `_toAddress`) from `_from` `_toAddress` can be any size depending on the `dstChainId`. `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token) `_adapterParams` is a flexible bytes array to indicate messaging adapter services"
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2302,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 2592,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "failedMessages",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))"
      },
      {
        "astId": 248,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 250,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 254,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "_owners",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 258,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "_balances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 262,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 268,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1235,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 115,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "_status",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3899,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "nextMintId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3901,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "maxMintId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3904,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "publicPrice",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3907,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "greenPrice",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3910,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "initPoz",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 3914,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "publicDate",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 3916,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "currentURI",
        "offset": 0,
        "slot": "17",
        "type": "t_string_storage"
      },
      {
        "astId": 3919,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "isPaused",
        "offset": 0,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 3923,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "countMinted",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3927,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "isGLClaimed",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3931,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "isFLClaimed",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3935,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "tokenBalance",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3939,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "withdrawTimes",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3943,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "tokenURIs",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3945,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "glMerkleRoot",
        "offset": 0,
        "slot": "25",
        "type": "t_bytes32"
      },
      {
        "astId": 3947,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "flMerkleRoot",
        "offset": 0,
        "slot": "26",
        "type": "t_bytes32"
      },
      {
        "astId": 3950,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "usdcToken",
        "offset": 0,
        "slot": "27",
        "type": "t_contract(IERC20Extented)3890"
      },
      {
        "astId": 3953,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "pozToken",
        "offset": 0,
        "slot": "28",
        "type": "t_contract(IERC20Extented)3890"
      },
      {
        "astId": 3955,
        "contract": "contracts/PozzlenautsONFTPoz.sol:PozzlenautsONFTPoz",
        "label": "treasuryWallet",
        "offset": 0,
        "slot": "29",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20Extented)3890": {
        "encoding": "inplace",
        "label": "contract IERC20Extented",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint64 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bytes32)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}